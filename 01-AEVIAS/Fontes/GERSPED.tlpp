#include 'protheus.ch'

User Function GerSped() 


Local     aPergs := {}
Private   aRet := {}
     
aAdd(aPergs,{1,"Qual Divisor?"              ,0            ,"@E 99.99"     ,"",""        ,"", 60,.T.})     // MV_PAR01

// 1 - MsGet [ParamBox]
// [2] : Descrição
// [3] : String contendo o inicializador do campo
// [4] : String contendo a Picture do campo
// [5] : String contendo a validação
// [6] : Consulta F3
// [7] : String contendo a validação When
// [8] : Tamanho do MsGet
// [9] : Flag .T./.F. Parâmetro Obrigatório ?

     If ParamBox(aPergs ,"Parametros ",aRet)
          Processa( {|| Import() }, "Aguarde...", "Atualizando Dados ECF...",.F.)
          Alert("Processo Finalizado!", "Atenção")
     Else
          Alert("Processo Cancelado!", "Atenção")
          Return()
     EndIf

 
Return

Static Function Import()

Local nTamFile, cBuffer, nBtLidos 

Local nHdl    := 0
Local cArqTxt := "c:\temp\SPED_TESTE.txt"
Local nHdlSai := 0
Local cArqSai := "c:\temp\SPED_SAI.txt"

Local cEol    := Chr(13)+Chr(10)
Local aSped   := {}
Local cLinha  := ""

Local nId     := 0
Local nIn     := 0
Local nI1     := 0
Local nlinhas := 0

Local nDado   := 0
Local nCampo  := 0
Local nColIni := 0
Local nColFim := 0
Local cVlrOri := ""
Local nValor  := 0
Local cVlrAlt := ""

if !file(cArqTxt)
   Msgalert("Arquivo não encontrado!")
   Return
endif

aadd(aSped,{"C155",4,6,7,8,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"E155",4,6,7,8,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"E355",4,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"K155",4,6,7,8,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"K156",5,6,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"K355",4,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"K356",3,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"L100",8,10,11,12,0,0,0,0})   //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"L210",4,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"L300",8,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"M300",6,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"M350",6,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"N500",4,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"N630",4,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"N650",4,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"N660",4,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"N670",4,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10
aadd(aSped,{"Y540",3,0,0,0,0,0,0,0})      //Tipo de registro e colunas que dividirá por 10



nHdl := fOpen(cArqTxt)                    //abrir o arquivo em modo compartilhado de leitura e escrita
If nHdl == -1
    MsgAlert("O arquivo de nome "+cArqTxt+" nao pode ser aberto! ","Atencao!")
    Return
Endif

nHdlSai := fCreate(cArqSai)
If nHdlSai == -1
    MsgAlert("O arquivo de nome "+cArqSai+" nao pode ser criado! ","Atencao!")
    Return
Endif

nTamFile := fSeek(nHdl,0,2)   // tamanho total do arquivo

nBuffer  := 0                 // Define o tamanho da linha
cBuffer  := Space(1)          // Variavel para criacao da linha do registro para leitura
nPosFile := 0
nBtLidos := 0
nTBtLidos:= 0
nlinhas  := 0

ProcRegua(nTBtLidos)


While nTamFile > nTBtLidos

   IncProc()


    nPos := nBuffer := 0
    while nPos == 0                              // SE CARACTER DE FINAL DE LINHA NAO FOR ENCONTRADO
      nPosFile := fSeek(nHdl,nPosFile,0)         // REPOSICIONA PONTEIRO DO ARQUIVO
      nBuffer  += 100                              // AUMENTA TAMANHO DO BUFFER
      cBuffer  := space(nBuffer)                 // REALOCA BUFFER
      nBtLidos := fRead(nHdl,@cBuffer,nBuffer)   // LE OS CARACTERES DO ARQUIVO
      nPos := at(cEol, cBuffer, 1)               // PROCURA O PRIMEIRO FINAL DE LINHA
    end
    
    nPosFile := fSeek(nHdl,nPosFile,0)      // REPOSICIONA PONTEIRO DO ARQUIVO
    nPos += 1                               // ACERTO FIM DE LINHA
    cBuffer  := space(nPos)                 // REALOCA BUFFER
    nBtLidos := fRead(nHdl,@cBuffer,nPos)   // LE OS CARACTERES DO ARQUIVO

    cLinha := cBuffer
    
    cReg := substr(cBuffer,2,4)
    if cReg == '9999'
       fWrite(nHdlSai,cLinha,at(cEol, cLinha)+1)
       nlinhas += 1
       MsgAlert(str(nlinhas) + " linhas processadas")
       Break
    endif

    for nId := 1 to len(aSped)
      if aSped[nId,1] == cReg
         aSpedIt := aSped[nId]
         for nIn := 2 to len(aSpedIt)
           nDado := aSpedIt[nIn]
           if nDado > 0
              nCampo := 0
              for nI1 := 1 to len(cLinha)
                if substr(cLinha,nI1,1)  == "|"
                   nCampo += 1
                   nColIni := nI1 + 1
                   if nCampo == nDado
                      nColFim := at("|", cLinha, nColIni)
                      cVlrOri := replace(substr(cLinha,nColIni,nColFim-nColIni),',','.')
                      nValor := ( val(cVlrOri) / aRet[1] )
                      cVlrAlt := iif(int(nValor)==nValor,alltrim(transform(nValor,"@E 999999999")),alltrim(transform(nValor,"@E 999999999.99")))
                      cLinha := substr(cLinha,1,nColIni-1)+cVlrAlt+substr(cLinha,nColFim,at(cEol, cLinha) )
                   endif
                endif
              next
           endif
         next
      endif
    next

    fWrite(nHdlSai,cLinha,at(cEol, cLinha)+1)

    nPosFile += nPos
    nTBtLidos += nBtLidos

    nlinhas += 1

End

fClose(nHdl)
fClose(nHdlSai)

MsgAlert(str(nlinhas) + " linhas processadas")

Return




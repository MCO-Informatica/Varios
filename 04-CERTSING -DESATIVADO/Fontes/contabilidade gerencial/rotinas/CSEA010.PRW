#INCLUDE "PROTHEUS.CH"
#INCLUDE "MSMGADD.CH"

#DEFINE nCSEINCLUI 9

STATIC nQtdEntid

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ CSEA010  ∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥  06/01/2014 ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Cadastro de Configuracoes de Entidades Contabeis.          ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
User Function CSEA010()

Local cAlias  		:= "CT0"
Local cExpFil		:= "CT0_ALIAS = 'CV0'" // DISPONIBILIZA AS FUNCIONALIDADES APENAS PARA AS ENTIDADES CONTROLADAS NA CV0 - PLANOS DE ENTIDADES CONTABEIS

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥ Define o cabecalho da tela de atualizacoes				        ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
Private cCadastro := "Manutencao de planos de entidades contabeis"

Private aRotina  	:= MenuDef()

dbSelectArea(cAlias)
(cAlias)->(dbSetOrder(1)) // CT0_FILIAL + CT0_ID
(cAlias)->(dbGotop())
mBrowse( 6, 1,22,75,cAlias,,,,,,,,,,,,,,cExpFil)	

RETURN
/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010DLG ∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥  ---------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Dialog de Visualizacao, Inclus„o, AlteraÁ„o, Exclusao      ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
User Function CSE010DLG(cAlias,nReg,nOpc)

// variaveis de tela
Local cCadastro		:= "Entidades Contabeis"
Local oDlg
Local oEnch,oPlano,oDesc
Local aExbCpo		:= {"CV0_PLANO","CV0_DESC","NOUSER"}
Local aHeaderCV0
Local aColsCV0		:= {}
Local aRecnosCV0	:= {}
Local nOpcao		:= 0
Local aSizeAut		:= {}
Local aObjects		:= {}
Local aButtons		:= {}
Local aInfo			:= {}
Local aPosObj		:= {}// variaveis de integridade
Local aArea			:= (cAlias)->(GetArea())
// variaveis de controle
Local bOk			:= { || IIf(U_CSE010TK() , (nOpcao:=1,oDlg:End()) , nOpcao := 0) }
Local bCancel		:= { || nOpcao:=0 , oDlg:End() }
Local cGetOpc		:= Nil
Local nX
Local lDefTop 		:= IIF(FindFunction("IfDefTopCTB") , IfDefTopCTB() , .F.) // verificar se pode executar query (TOPCONN)   
Local cItem			:= StrZero(0,TamSX3("CV0_ITEM")[1])
Private oGDItens
Private cPlanoCV0
Private nLinInc
Private aGets		:= {} 
Private aTela		:= {}
Private bLinGtd		:= {|| If(Valtype(oGDItens)="O",oGDItens:nAt,0) }
Private INCLUI		:= .F.

//Tratamento para executar a opcao que se deseja 
//Necessario por nao ter rotina de Inclusao.
//nOpc chega com a posiÁ„o do array aRotina
//Para que na confirmacao da inclusao nao seja exibida a tela vazia novamente, na mBrowse e informada uma opcao diferente de 3
nOpc := IIF( aRotina[nOpc,4] == nCSEINCLUI, 3, aRotina[nOpc,4])

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥ Posiciona no primeiro registro do plano selecionado no alias CV0		    ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
DbSelectArea("CV0")
DbSetOrder(1) //CV0_FILIAL+CV0_PLANO+CV0_CODIGO
IF nOpc != 3 .AND. !DbSeek(xFilial("CV0")+CT0->CT0_ENTIDA)
	HELP(" ",1,"CSE010DLG.01",,"Nao existe o cadastro de plano de entidades selecionado."+CRLF+;
										 "Favor selecionar outra opcao de manutencao para a entidade contabil.",4,0)
	RestArea(aArea)
	Return
ELSEIF nOpc == 3 .AND. DbSeek(xFilial("CV0")+CT0->CT0_ENTIDA)
	HELP(" ",1,"CSE010DLG.02",,"Ja existe o cadastro de plano de entidades selecionado."+CRLF+;
										 "Favor selecionar outra opcao de manutencao para a entidade contabil.",4,0)
	RestArea(aArea)
	Return
ENDIF

nReg   := IIf(nOpc==3,Nil,CV0->(Recno()))
cAlias := "CV0"

// Maximizacao da tela em relaÁ„o a area de trabalho
aSizeAut := MsAdvSize()
aAdd(aObjects,{100,040,.T.,.F.})
aAdd(aObjects,{100,100,.T.,.T.})

aInfo     := {aSizeAut[1],aSizeAut[2],aSizeAut[3],aSizeAut[4],3,3}
aPosObj   := MsObjSize(aInfo,aObjects)

If nOpc == 2	//VisualizaÁ„o
	nOpEnch	:= 2
	INCLUI	:= .F.
	ALTERA	:= .F.
	cPlanoCV0 := CV0->CV0_PLANO
	cDescCV0 := CV0->CV0_DESC
ElseIf nOpc == 3	//Inclus„o
	nOpEnch	:= 3
	INCLUI	:= .T.
	ALTERA	:= .F.
	cPlanoCV0 := CT0->CT0_ENTIDA
	cDescCV0 := CT0->CT0_DESC
ElseIf nOpc == 4	//AlteraÁ„o
	nOpEnch	:= 3   
	INCLUI	:= .F.
	ALTERA	:= .T.
	cPlanoCV0 := CV0->CV0_PLANO
	cDescCV0 := CV0->CV0_DESC
ElseIf nOpc == 5	//Exclus„o
	nOpEnch	:= 5   
	INCLUI	:= .F.
	ALTERA	:= .F.
	cPlanoCV0 := CV0->CV0_PLANO
	cDescCV0 := CV0->CV0_DESC
Else //Outras situaÁıes
	nOpEnch	:= 2   
	INCLUI	:= .F.
	ALTERA	:= .F.
	cPlanoCV0 := CV0->CV0_PLANO
	cDescCV0 := CV0->CV0_DESC
EndIf

cGetOpc := Iif(Altera .OR. Inclui, GD_INSERT+GD_DELETE+GD_UPDATE, 0)

If !CSE010Tab(CV0->CV0_PLANO)
	Return
EndIf

If !lDefTop
	EndFilBrw(cAlias,aIndexCV0)
Endif

//Define teclas de atalho para os botoes da enchoice
SetKey( VK_F4, {|| GdSeek(oGDItens,"Pesquisar",aHeaderCV0,aColsCV0,.F.)} )

//Definicao dos botoes adicionais da enchoice
aAdd( aButtons, { "PMSPESQ",{|| GdSeek(oGDItens,"Pesquisar",aHeaderCV0,aColsCV0,.F.)}, "Pesquisar", "Pesquisar - <F4>"})

// Montagem da tela que serah apresentada para usuario (lay-out)
Define MsDialog oDlg Title cCadastro From aSizeAut[7],0 To aSizeAut[6],aSizeAut[5] Of oMainWnd Pixel

@ 028,008 	SAY OemToAnsi("Plano") SIZE 18, 7 OF oDlg PIXEL
oPlano	:=	TGet():New( 025, 038, {|u| If(PCount() > 0,cPlanoCV0 := u,cPlanoCV0) }, oDlg, 020, ,"@!",{||U_CSE010VP()},,,,,,.T./*<.pixel.>*/,,,{|| .F. },,,,,,,"cPlanoCV0"/*<(uVar)>*/	,,,)

@ 028,158 	SAY OemToAnsi("DescriÁ„o") SIZE 35, 7 OF oDlg PIXEL
oDesc		:=	TGet():New( 025, 198, {|u| If(PCount() > 0,cDescCV0 := u,cDescCV0)  }	, oDlg, 080, ,"@!",						,,,,,,.T./*<.pixel.>*/,,,{|| .F. },,,,,,,"cDescCV0"/*<(uVar)>*/	,,,)

aHeaderCV0	:= CSEA10A(cAlias,,{"CV0_PLANO"})

DbSelectArea(cAlias)
DbSetOrder(1)
If nOpc <> 3
	MsgRun("Carregando dados do plano de entidades cont·beis selecionado...",cPlanoCV0+" - "+cDescCV0, {|| GetAcols(cAlias, nReg, @cPlanoCV0, aHeaderCV0, @aColsCV0, @aRecnosCV0) } )
EndIf

//******************************
// Busca utima linha com recno *
//******************************
nLinInc := Len(aRecnosCV0)

oGDItens:= MsNewGetDados():New(aPosObj[2,1],aPosObj[2,2],aPosObj[2,3],aPosObj[2,4],cGetOpc,"U_CSE010LK()",,"+CV0_ITEM",,,15000,,,"U_CSE010DK()",oDlg,aHeaderCV0,aColsCV0)

Activate MsDialog oDlg On Init EnchoiceBar(oDlg,bOk,bCancel,,aButtons)

If nOpcao == 1

	//**********************
	// Inicio da Transac„o *
	//**********************
	Begin Transaction

	aColsCV0 := oGDItens:aCols
	DbSelectArea(cAlias)

	Do Case
		Case nOpc == 3
			RecLock("CV0",.T.)
			CV0->CV0_FILIAL	:= xFilial(cAlias)
			CV0->CV0_PLANO	:= cPlanoCV0
			CV0->CV0_DESC	:= cDescCV0  
			MsUnLock()
	 	Case nOpc == 4
		DbGoTo(nReg)
			RecLock("CV0",.F.)
			CV0->CV0_FILIAL	:= xFilial(cAlias)
			CV0->CV0_PLANO	:= cPlanoCV0
			CV0->CV0_DESC	:= cDescCV0
			MsUnLock()
		Case nOpc == 5
		DbGoTo(nReg)
			RecLock("CV0",.F.,.T.)
			DbDelete()
			MsUnLock()
	EndCase
	
	For nX:= 1 to Len(aColsCV0)
		//**************************
		// Procura recno da linha  *
		//**************************
		If nX <= Len(aRecnosCV0)
			DbSelectArea(cAlias)
			DbGoTo(aRecnosCV0[nX])
	
			If !aColsCV0[nX, Len(aHeaderCV0) +1 ] .and. nOpc <> 5
				//*****************************************************
				// Altera linhas n„o deletadas quando nao for Delete  *
				//*****************************************************
				RecLock("CV0",.F.)
				CV0->CV0_FILIAL	:= xFilial(cAlias)
				CV0->CV0_PLANO	:= cPlanoCV0
				aEval(aHeaderCV0, {|x,y| If(x[10]<>"V",CV0->&(x[2]) := aColsCV0[nX,y],.F.) })
				MsUnLock()				
			Else
				//***********************************************
				// Deleta linhas deletas ou Delete de entidades *
				//***********************************************
				RecLock("CV0",.F.,.T.)
				DbDelete()
				MsUnLock()
			EndIf
		ElseIf !aColsCV0[nX, Len(aHeaderCV0) +1 ]
			//************************
			// Cria linhas sem recno *
			//************************
			RecLock("CV0",.T.)
			CV0->CV0_FILIAL	:= xFilial(cAlias)
			CV0->CV0_PLANO	:= cPlanoCV0
			aEval(aHeaderCV0, {|x,y| If(x[10]<>"V",CV0->&(x[2]) := aColsCV0[Nx,y],.F.) })
			MsUnLock()
					
		EndIf
	Next
	
    CV0->(dbSetOrder(1)) //CV0_FILIAL+CV0_PLANO+CV0_CODIGO
    If CV0->(MsSeek(xFilial("CV0") + cPlanoCV0 ))
    	While CV0->(!EOF()) .And. CV0->(CV0_FILIAL+CV0_PLANO) == xFilial("CV0") + cPlanoCV0
    	    If !Empty(CV0->CV0_CODIGO)
	    	    cItem := Soma1(cItem)
	    	    RecLock("CV0",.F.)
				CV0->CV0_ITEM	:= cItem
	    	    MsUnLock()
    	    EndIf
    		CV0->(dbSkip())
    	EndDo  
    EndIf 
           
	//*******************
	// Fim da Transac„o *
	//*******************	
	End Transaction	
	
EndIf

If !lDefTop
	//Executa filtro automaticamente
	DbSelectArea(cAlias)
	dbSetOrder(1)                             
	Eval(bFiltraBrw)
EndIf

SetKey( VK_F4, nil)

RestArea(aArea)

Return

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010Plan∫Autor  ≥ TOTVS Protheus     ∫ Data ≥  02/12/2013 ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Funcao para verificacao e inclusao da linha base do        ∫±±
±±∫          ≥ do cadastro da entidade.                                   ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ CSEP010 - INTEGRACAO CADASTRO DE PRODUTOS X ENTIDADE 07    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/

STATIC FUNCTION CSE010Plano(cCV0_PLAN,cCV0_DESC)

LOCAL aArea 		:= GetArea()
LOCAL cCV0_COD		:= SPACE(TAMSX3("CV0_CODIGO")[1])

DbSelectArea("CV0")
DbSetOrder(1) // CV0_FILIAL+CV0_PLANO+CV0_CODIGO
IF !DbSeek(xFilial("CV0")+cCV0_PLAN+cCV0_COD)		
	RecLock("CV0",.T.)
		CV0->CV0_FILIAL		:= xFilial("CV0")
		CV0->CV0_PLANO 		:= cCV0_PLAN
		CV0->CV0_ITEM  		:= "000000"
		CV0->CV0_CODIGO		:= cCV0_COD
		CV0->CV0_DESC  		:= cCV0_DESC
		CV0->CV0_CLASSE		:= "1"
		CV0->CV0_NORMAL		:= "2"
		CV0->CV0_ENTSUP		:= ""
		CV0->CV0_BLOQUE		:= "2"
		CV0->CV0_DTIBLQ		:= CTOD("")
		CV0->CV0_DTFBLQ		:= CTOD("")
		CV0->CV0_DTIEXI		:= CTOD("01/01/"+STR(Year(dDataBase),4))
		CV0->CV0_DTFEXI		:= CTOD("")
		CV0->CV0_CFGLIV		:= ""
		CV0->CV0_LUCPER		:= ""
		CV0->CV0_PONTE			:= ""
	MsUnlock()		
ENDIF

RestArea(aArea)
RETURN

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ GetAcols ∫Autor  ≥TOTVS PROTHEUS      ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Carrega o aCols com os dados do CV0                        ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
STATIC FUNCTION GetAcols(cAlias, nReg, cPlanoCV0, aHeaderCV0, aColsCV0, aRecnosCV0)

DEFAULT aColsCV0 := {}

DbSelectArea(cAlias)
DbGoTo(nReg)
cPlanoCV0 := CV0->CV0_PLANO
Do While !(cAlias)->(Eof()) .and. xFilial(cAlias)+cPlanoCV0 == CV0->CV0_FILIAL+CV0->CV0_PLANO
	If !Empty(CV0->CV0_CODIGO)
		aAdd(aRecnosCV0, (cAlias)->(Recno()) )
		aAdd(aColsCV0,Array(Len(aHeaderCV0) + 1))
		AEval(aHeaderCV0, {|x,y| aColsCV0[Len(aColsCV0)][y] := If(Alltrim(x[2])$"CV0_ALI_WT|CV0_REC_WT".OR. x[10]=="V",NIL, CV0->(FieldGet(FieldPos(x[2]))) ) })
		aColsCV0[Len(aColsCV0),Len(aHeaderCV0) + 1] := .F.
	EndIf
	(cAlias)->(DbSkip())
EndDo

RETURN

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010VP  ∫Autor  ≥TOTVS PROTHEUS      ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Valida se o plano ja esta cadastrado                       ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/

USER FUNCTION CSE010VP()

Local lRet		:= .T.
Local aSaveArea	:= GetArea()
Local aSaveCV0	:= CV0->(GetArea())

If INCLUI
	DbSelectArea("CV0")
	DbSetOrder(1)
	If DbSeek(xFilial("CV0")+cPlanoCV0)
		lRet := .F. 
		HELP(" ",1,"CSE010VP.01",,"Plano j· cadastrado",4,0)
	EndIf
EndIf

RestArea(aSaveCV0)
RestArea(aSaveArea)

Return lRet

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010LK  ∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Validacao da linha da GetDados                             ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/

USER FUNCTION CSE010LK()

Local lRet			:= .T.
Local nX			:= 0
Local nLin			:= oGDItens:nAt //Linha posicionada no aCols
Local nPosCodEnt	:= aScan(oGDItens:aHeader,{|x|AllTrim(Upper(x[2]))=="CV0_CODIGO"}) //Posicao do codigo da entidade
Local nPosCodESp	:= aScan(oGDItens:aHeader,{|x|AllTrim(Upper(x[2]))=="CV0_ENTSUP"}) //Posicao do codigo da entidade superior
Local nPosClasse	:= aScan(oGDItens:aHeader,{|x|AllTrim(Upper(x[2]))=="CV0_CLASSE"}) //Posicao da classe da entidade 1-Sintetica 2-Analitica
Local aColsCV0		:= aClone(oGDItens:aCols)

Do Case

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥Se a linha estiver deletada≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	Case aColsCV0[nLin][Len(aColsCV0[nLin])]
		Return(lRet)

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥Se o cod. da entidade for igual ao cod. da entidade superior≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	Case AllTrim(aColsCV0[nLin][nPosCodEnt]) == AllTrim(aColsCV0[nLin][nPosCodESp])
		lRet := .F.
		HELP(" ",1,"CSE010LK.01",,"Codigo da entidade superior dever· ser diferente do codigo do entidade posicionada.",4,0)

EndCase

If lRet
	For nX := 1 To Len(aColsCV0)

		Do Case

			//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
			//≥Para nao avaliar a linha posicionada e linhas deletadas≥
			//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
			Case nX == nLin .Or. aColsCV0[nX][Len(aColsCV0[nX])]
				Loop

			//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
			//≥Verifica se o codigo da entidade esta duplicado≥
			//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
			Case AllTrim(aColsCV0[nX][nPosCodEnt]) == AllTrim(aColsCV0[nLin][nPosCodEnt])
				lRet := .F.
				HELP(" ",1,"CSE010LK.02",,"CÛdigo da entidade j· cadastrado",4,0)
				Exit

			//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
			//≥Verifica se ha entidade superior e valida a estrutura de analita/sintetica≥
			//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
			Case !Empty(aColsCV0[nLin][nPosCodESp]) .And. AllTrim(aColsCV0[nX][nPosCodEnt]) == AllTrim(aColsCV0[nLin][nPosCodESp]) .And.;
					aColsCV0[nX][nPosClasse] == "2"	//Se a entidade superior for analitica
					lRet := .F.						//nao permite que haja entidade inferior
					HELP(" ",1,"CSE010LK.03",,"Entidade superior inv·lida, confira a classe da conta superior.",4,0)
					Exit
					
			//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
			//≥Verifica se ha entidade inferior e valida a estrutura de analitica/sintetica≥
			//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
			Case aColsCV0[nLin][nPosClasse] == "2" .And. AllTrim(aColsCV0[nLin][nPosCodEnt]) == AllTrim(aColsCV0[nX][nPosCodESp])
					lRet := .F.						//nao permite que altera a classe para analitica se houver entidade inferior
					HELP(" ",1,"CSE010LK.04",,"Classe inv·lida, h· entidade(s) inferior(es) relacionada(s).",4,0)
					Exit

		EndCase

	Next
EndIf

Return lRet

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010Dk  ∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Valida a exclusao de linha da GetDados                     ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
USER FUNCTION CSE010DK()

Local lRet			:= .T.
Local nX				:= 0
Local nLin			:= oGDItens:nAt //Linha posicionada no aCols
Local nPosCodEnt	:= aScan(oGDItens:aHeader,{|x|AllTrim(Upper(x[2]))=="CV0_CODIGO"}) //Posicao do codigo da entidade
Local nPosCodESp	:= aScan(oGDItens:aHeader,{|x|AllTrim(Upper(x[2]))=="CV0_ENTSUP"}) //Posicao do codigo da entidade superior
Local aColsCV0		:= aClone(oGDItens:aCols)

For nX := 1 To Len(aColsCV0)

	Do Case

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥Para nao avaliar a linha posicionada e linhas deletadas≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		Case nX == nLin .Or. aColsCV0[nX][Len(aColsCV0[nX])]
			Loop

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥Verifica se a entidade deletada eh superior de outra entidade≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		Case AllTrim(aColsCV0[nX][nPosCodESp]) == AllTrim(aColsCV0[nLin][nPosCodEnt])
			lRet := .F.
			HELP(" ",1,"CSE010DK.01",,"A entidade selecionada possui relacionamento(s) com outra(s) entidade(s)",4,0)
			Exit

	EndCase

Next

Return lRet

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010TK  ∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Valida o preenchimento do cabecalho e dos itens            ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
USER FUNCTION CSE010TK()

Local lRet := .T.

Do Case

	Case Empty(cPlanoCV0)
		HELP(" ",1,"CSE010DTK.01",,"Preencha o campo Plano",4,0)
		lRet := .F.

	Case Empty(cDescCV0)
		HELP(" ",1,"CSE010DTK.02",,"Preencha o campo DescriÁ„o",4,0)
		lRet := .F.

	Case !oGDItens:TudoOk()
		lRet := .F.
		
EndCase

Return lRet   

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010Tab ∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥Valida a manutenÁ„o da tabela                               ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ AP                                                         ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
STATIC FUNCTION CSE010Tab(cPlano)

Local lRet     := .T.
Local aArea    := GetArea()
Local aAreaCT0 := CT0->(GetArea())

CT0->(dbSetOrder(1)) //CT0_FILIAL+CT0_ID

If CT0->(dbSeek(xFilial("CT0") + cPlano ))
	If Alltrim(CT0->CT0_ALIAS) != "CV0"
		Help("  ",1,"CSE010TAB",,"Entidade relacionada a tabela " + CT0->CT0_ALIAS + " . " +"Por favor, utilize o cadastro padr„o desta entidade"  ,1,0)
		lRet := .F.
	EndIf
EndIf

RestArea(aAreaCT0)
RestArea(aArea)
Return lRet
/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ CSE010SN ∫Autor  ≥ TOTVS Protheus     ∫ Data ≥  06/01/2014 ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ FUNCAO QUE DIRECIONA AS CHAMADAS DOS SINCRONISMOS          ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ CONTABILIDADE GERENCIAL - ORCAMENTO CONTABIL               ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
USER FUNCTION CSE010SN(nOpcCad)

LOCAL aArea := GetArea()

DO CASE	
	CASE nOpcCad == 1

		DbSelectArea("SA1")
		DbSetOrder(1)
		U_CSEP030(6)
		
	CASE nOpcCad == 2

		DbSelectArea("SA2")
		DbSetOrder(1)
		U_CSEP020(6)
		
	CASE nOpcCad == 3

		DbSelectArea("SB1")
		DbSetOrder(1)
		U_CSEP010(6)
		
ENDCASE

RestArea(aArea)
RETURN

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ CSE010IP ∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥  ---------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Importacao de entidade em formato .CSV                     ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
USER FUNCTION CSE010IP(cAlias,nOpc,nRecno)

Local aArea		:= GetArea()

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥ Perguntas para parametrizacao da rotina (PARAMBOX)          			    ≥
//≥ MV_PAR01   - Arquivo a importar:           						     	       ≥
//≥ MV_PAR02   - Entidade:                         					     	    ≥
//≥ MV_PAR03   - Plano contabil:                   					     	    ≥
//≥ MV_PAR04   - Modo de importacao: (Novo cadastro / Atualizar cadastro)   ≥
//≥ MV_PAR05   - Exibe cadastro para edicao: (Sim / Nao)   						 ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ

If CSE010PBI() .AND.;//Parambox da rotina de exportacao do orcamento
	ApMsgNoYes(	"Confirma a importacao do cadastro da entidade selecionada ?","PLANOS DE ENTIDADES CONTABEIS: Importacao")
				MsgRun("Importando cadastro de plano de entidades contabeis...","PLANOS DE ENTIDADES CONTABEIS: Importacao",{|| CSE010IMP(cAlias,nOpc,nRecno)})
ENDIF

RestArea(aArea)
RETURN
/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ CSE010IMP∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Importacao da entidade em formato .CSV                     ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/

STATIC FUNCTION CSE010IMP(cAlias,nOpc,nRecno)

Local aArea			:= GetArea()
Local cLine			:=	""
Local aField 		:= {{}}
Local aData   		:= {{}}
Local aTempRead	:= {}
Local aTempData	:= {}
Local nLenFields	:= 0
Local nLenData		:= 0
Local lProcess		:= .T.
Local nModo			:= 0      
Local nX,nY,nZ

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Identificadores das posicoes dos alias nos arrays de trabalho              ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
Local aAlias		:= {"CV0"}
Local nPosAlias		:= 0
Local cAliasCab		:= "CV0"
Local aAliasIt		:= {"CV0"}

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Indica se irah gerar o cadastro de orcamento bloqueado, e qual o campo     ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
Local lMsBlQl		:= .T.
Local cFieldBlq	:= "CV0_BLOQUE"//"CV0_MSBLQL"
Local nPosField	:= 0

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Salva as variaveis de ambiente                                             ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
SaveInter()

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Inicio do processamento                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Validacoes preliminares                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ

IF (nHandle := FT_FUse(AllTrim(MV_PAR01)))== -1
	HELP(" ",1,"CSE010IMP.01",,"Nao foi possivel abrir o arquivo selecionado para importacao.",4,0)//"Nao foi possivel abrir o arquivo selecionado para importacao."
	lProcess := .F.
ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥1a Etapa: Leitura do arquivo em conversao nos arrays de trabalho ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF lProcess

	WHILE !FT_FEOF()
	
		cLine		:= FT_FREADLN()
		aTempRead 	:= StrtoKarr(cLine,";")
	
		IF 		aTempRead[1] == "0" // Linhas de estrutrua de campos
			
			IF (nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(aTempRead[2]) == cAlias})) > 0

				// Elimina as duas primeiras posicoes: Identificador e Alias
				FOR nX := 3 TO LEN(aTempRead)
					AADD(aField[nPosAlias],{aTempRead[nX],X3TIPO(aTempRead[nX])})
				NEXT nX
				
			ELSE
				HELP(" ",1,"CSE010IMP.02",,	"Erro na estrutura do arquivo selecionado para importacao."+CRLF+;
											"Alias invalido: "+ALLTRIM(aTempRead[2]),4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Alias invalido: "
				lProcess := .F.
				EXIT
			ENDIF
	
		ELSEIF	aTempRead[1] $ "1/2"	// Linha de dados: CV0(1)
			
			IF (nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(aTempRead[2]) == cAlias})) > 0

				aTempData := {}
				
				// Elimina as duas primeiras posicoes: Identificador e Alias
				FOR nX := 3 TO LEN(aTempRead)
					AADD(aTempData,aTempRead[nX])			
				NEXT nX		

				AADD(aData[nPosAlias],aClone(aTempData))
				
			ELSE
				HELP(" ",1,"CSE010IMP.03",,	"Erro na estrutura do arquivo selecionado para importacao."+CRLF+;
											"Alias invalido: "+ALLTRIM(aTempRead[2]),4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Alias invalido: "
				lProcess := .F.
				EXIT
			ENDIF

		ELSE
			HELP(" ",1,"CSE010IMP.04",,	"Erro na estrutura do arquivo selecionado para importacao."+CRLF+;
										"Identificador de linha invalido: "+aTempRead[1],4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Identificador de linha invalido: "
			lProcess := .F.
			EXIT
		ENDIF
	
		FT_FSKIP()
		
	END

	FT_FUSE()
	FCLOSE(nHandle)

ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥2a Etapa: Validacao da estrutura de campos e conteudos dos arrays≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF lProcess

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥2.1: Valida se existe no alias de cabecalho o campo para bloqueio≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	IF lMsBlQl

		nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(cAlias) == ALLTRIM(cAliasCab)})        

            IF (aAlias[nPosAlias])->(FieldPos(ALLTRIM(cFieldBlq))) == 0

			HELP(" ",1,"CSE010IMP.05",,	"Nao existe no sistema para o arquivo de cabecalho: "+aAlias[nPosAlias]+" "+CRLF+;
										"o campo de bloqueio necessario para o cadastro : "+ALLTRIM(cFieldBlq),4,0)
			lProcess := .F.		
            
            ENDIF

	ENDIF
	
	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥2.2: Validacao da quantidade de estruturas de campos x Alias     ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	IF LEN(aField) != LEN(aAlias)

		HELP(" ",1,"CSE010IMP.06",,	"Erro na estrutura de campos informada no arquivo selecionado para importacao."+CRLF+;
									"Quantidade de estruturas suportadas/necessarias: "+STRZERO(LEN(aAlias))+CRLF+;
									"Quantidade de estruturas informadas no arquivo : "+STRZERO(LEN(aField))+CRLF,4,0)
		lProcess := .F.		
	
	ELSE

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥2.3: Validacao do dicionario de dados x estrutura de campos      ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		FOR nX := 1 TO LEN(aAlias) // 1-> CV0

			FOR nY := 1 TO LEN(aField[nX])

				IF (aAlias[nX])->(FieldPos(aField[nX][nY][1])) == 0

					HELP(" ",1,"CSE010IMP.07",,	"Erro na estrutura de campos informada no arquivo selecionado para importacao."+CRLF+;
												"Campo invalido: "+aField[nX][nY][1],4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Identificador de linha invalido: "
					lProcess := .F.
					EXIT
				
				ENDIF
			
			NEXT nY
		
		NEXT nX

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥2.4: Validacao da quantidade de itens das linhas de dados x campos ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		FOR nX := 1 TO LEN(aAlias)
			
			nLenFields := Len(aField[nX])
			
			FOR nY := 1 TO LEN(aData[nX])

				nLenData := Len(aData[nX][nY])
							
				IF nLenData != nLenFields

					HELP(" ",1,"CSE010IMP.08",,	"Erro na estrutura de campos informada no arquivo selecionado para importacao."+CRLF+;
												"Quantidade de campos invalida: "+CRLF+;
												"Alias: "+aAlias[nX]	+" / Campos: "+STRZERO(nLenFields)+CRLF+;
												"Linha: "+STRZERO(nY)	+" / Campos: "+STRZERO(nLenData)+" .",4,0)
					lProcess := .F.
					EXIT
				
				ENDIF	
			
			NEXT nY
		
		NEXT nX
		
	ENDIF
	
ENDIF
    
//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥3a Etapa: Efetua a gravacao da tabela CV0 conforme o modo        ≥
//≥definido para a importacao: Novo cadastro ou Atualizar cadastro  ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF lProcess
	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥3.1: Validacao dos parametros de importacao em funcao do modo    ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	DbSelectArea("CV0")
	DbSetOrder(1) //CV0_FILIAL+CV0_PLANO+CV0_CODIGO
	lFind := CV0->(DbSeek(xFilial("CV0")+MV_PAR03))
	DO CASE
		CASE lFind .AND. MV_PAR04 == 1 //Encontrou orcamento e o modo definido foi "Novo Cadastro"

			IF Aviso("Importacao do cadastro de plano de entidades contabeis",;
					 "Existe um plano cadastrado com as informacoes de importacao selecionadas."+CRLF+;
					 "Deseja atualizar o cadastro ou finalizar o processo?",;
					 {"Atualizar","Finalizar"}) == 1
				nModo	 := 2 // Atualizar cadastro jah existente
			ELSE
				lProcess := .F.				
			ENDIF
		
		CASE lFind .AND. MV_PAR04 == 2 //Encontrou cadastro e o modo definido foi "Atualizar"
	
			nModo	 := 2 // Revisao para um orcamento jah existente
		
		CASE !lFind .AND. MV_PAR04 == 1// Nao encontrou orcamento e o modo definido foi "Novo cadastro"

			nModo	 := 1 		// Novo orcamento

		CASE !lFind .AND. MV_PAR04 == 2// Nao encontrou cadastro e o modo definido foi "Atualizar"

			IF Aviso("Importacao do cadastro de plano de entidades contabeis",;
					 "Nao existe um plano cadastrado com as informacoes de importacao selecionadas."+CRLF+;
					 "Deseja incluir um novo plano ou finalizar o processo?",;
					 {"Incluir","Finalizar"}) == 1
				nModo	 := 1 		// Novo orcamento

			ELSE
				lProcess := .F.				
			ENDIF

	END CASE

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥3.1.1: Se for modo de atualizacao, exclui os dados atuais do plano ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	IF lProcess .AND. nModo == 2
		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥3.1.1.1: Valida para verificar se as entidades possuem movimentacoes ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		CV0->(DbSeek(xFilial("CV0")+MV_PAR03))
		WHILE CV0->(!Eof()) .AND. CV0->CV0_PLANO == MV_PAR03
		
			IF !CSEValDel("CV0"/*cArqDel*/, MV_PAR01 /*cEntidade*/, CV0->CV0_CODIGO/*cCodEnt*/, '01'/*cMoeda*/,'1' /*cTpSaldo*/)

				HELP(" ",1,"CSE010IMP.09",,	"Nao foi possivel excluir uma das entidades do cadastro de plano atual"+CRLF+;
											"pois a mesma possui movimentacoes."+CRLF+;
											"Entidade: "+MV_PAR02+" / Plano: "+MV_PAR03+" / Entidade: "+ALLTRIM(CV0->CV0_CODIGO)+CRLF+;
											"O processo sera finalizado.",4,0)

				lProcess := .F.
				Exit
			ENDIF

			CV0->(DbSkip())		
		END      

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥3.1.1.2: Continua somente se todas as entidades puderem ser excluidas≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		IF lProcess 
			CV0->(DbSeek(xFilial("CV0")+MV_PAR03))
			WHILE CV0->(!Eof()) .AND. CV0->CV0_PLANO == MV_PAR03
				RecLock("CV0",.F.,.T.)
				DbDelete()
				MsUnLock()
				CV0->(DbSkip())		
			END      
		ENDIF

	ENDIF
	
	IF lProcess
	
		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥ INICIO DA TRANSACAO                                               ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		BEGIN TRANSACTION

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥3.2: Gravacao dos itens do cadastro do plano de entidades contabeis≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		
		FOR nX := 1 TO Len(aAliasIt)

			DbSelectArea(aAliasIt[nX])
                                        
			IF (nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(cAlias) == ALLTRIM(aAliasIt[nX])})) > 0

				FOR nY := 1 TO Len(aData[nPosAlias])

					RecLock(aAliasIt[nX],.T.)
	
					FOR nZ := 1 TO Len(aField[nPosAlias])
	
						IF (aAliasIt[nX])->(FieldPos(aField[nPosAlias][nZ][1])>0)
						
							IF 		ALLTRIM(aField[nPosAlias][nZ][1]) == "CV0_FILIAL"
						
								FieldPut(FieldPos(aField[nPosAlias][nZ][1]), xFilial(aAliasIt[nX]) )	

							ELSEIF	ALLTRIM(aField[nPosAlias][nZ][1]) == "CV0_PLANO"
							
								FieldPut(FieldPos(aField[nPosAlias][nZ][1]), MV_PAR03 ) 	// PLANO DA ENTIDADE

							ELSE
														
								DO CASE
									CASE aField[nPosAlias][nZ][2] == "C"
										FieldPut(FieldPos(aField[nPosAlias][nZ][1]), NoAcento(ALLTRIM(aData[nPosAlias][nY][nZ])) )
									CASE aField[nPosAlias][nZ][2] == "L"
										FieldPut(FieldPos(aField[nPosAlias][nZ][1]), IIf( ALLTRIM(aData[nPosAlias][nY][nZ]) == "T", .T., .F. ) )
									CASE aField[nPosAlias][nZ][2] == "D"
										FieldPut(FieldPos(aField[nPosAlias][nZ][1]), STOD( ALLTRIM(aData[nPosAlias][nY][nZ]) ) )
									CASE aField[nPosAlias][nZ][2] == "N"
										FieldPut(FieldPos(aField[nPosAlias][nZ][1]), Val( ALLTRIM(aData[nPosAlias][nY][nZ]) ) )
									CASE aField[nPosAlias][nZ][2] == "M"
										FieldPut(FieldPos(aField[nPosAlias][nZ][1]), NoAcento(ALLTRIM(aData[nPosAlias][nY][nZ])) )								
								ENDCASE
						    
						    ENDIF
						    
						ENDIF
				
					NEXT nZ
					
					//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
					//≥3.2.1: Gravacao do campo de bloqueio dos itens do cadastro do plano≥
					//≥       Tratamento para garantir o bloqueio mesmo se o campo nao	 ≥
					//≥       existir no arquivo importado.                               ≥
					//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
					FieldPut(FieldPos(ALLTRIM(cFieldBlq)), "1" ) // 1-SIM; 2-NAO
					MsUnlock()
				
				NEXT nY

			ELSE
				HELP(" ",1,"CSE010IMP.10",,	"Erro na gravacao dos dados nos arquivos de itens."+CRLF+;
											"Alias de itens: "+aAliasIt[nX],4,0)
				lProcess := .F.
				DisarmTransaction()
				EXIT
			ENDIF				
			
		NEXT nX

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥ 3.3. EFETUA A GRAVACAO DA LINHA BASE DO PLANO CASO NAO EXISTA     ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		CSE010Plano(CT0->CT0_ENTIDA,CT0->CT0_DESC)
		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥ FIM DA TRANSACAO                                                  ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		END TRANSACTION
	ENDIF
ENDIF

IF lProcess
	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥4.0: Se o cadastro  foi importado com sucesso exibe o mesmo para   ≥
	//≥     edicao, conforme parametro MV_PAR05, senao encerra.           ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	IF MV_PAR05 == 1 // Exibe orcamento para edicao
		CV0->(DbSeek(xFilial("CV0")+MV_PAR03))
		U_CSE010DLG("CV0",CV0->(RECNO()),4)
	ELSE
		Aviso("Processameto concluido",	"Importacao do orcamento efetuada com sucesso."+CRLF+;
										"Favor proceder com a conferencia e liberacao do orcamento.",{"Concluir"})
	ENDIF
									
ELSE
	Aviso("Processamento com criticas","Nao foi possivel efetuar a importacao do orcamento.",{"Concluir"})
ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Restaura as variaveis de ambiente                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
RestInter()
RestArea(aArea)
Return(.T.)
/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ CSE010EP ∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥  ---------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Exportacao da entidade em formato .CSV                     ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
USER FUNCTION CSE010EP(cAlias,nOpc,nRecno)

Local aArea		:= GetArea()

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥ Perguntas para parametrizacao da rotina (PARAMBOX)          			    ≥
//≥ MV_PAR01   - Entidade:                         					     	    ≥
//≥ MV_PAR02   - Plano Contabil:               						     	       ≥
//≥ MV_PAR03   - Arquivo destino:              						     	       ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ

If CSE010PBE() .AND.;//Parambox da rotina de exportacao do orcamento
	ApMsgNoYes(	"Confirma a exportacao do cadastro da entidade selecionada ?","PLANOS DE ENTIDADES CONTABEIS: Exportacao")
				MsgRun("Exportando cadastro de plano de entidades contabeis...","PLANOS DE ENTIDADES CONTABEIS: Exportacao",{|| CSE010EXP(cAlias,nOpc,nRecno)})
ENDIF

RestArea(aArea)
RETURN
/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ CSE010EXP∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Exportacao da entidade em formato .CSV                     ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
STATIC FUNCTION CSE010EXP(cAlias,nOpc,nRecno)

Local aArea		:= GetArea()
Local cFile		:= ""
Local cLine		:= ""
Local aTxt		:= {}
Local aStruCV0	:= {}
Local nX,nY

Local lProcess	:= .T.

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Salva as variaveis de ambiente                                             ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
SaveInter()

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Inicia o processamento da exportacao                                       ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF Empty( MV_PAR03 )
	HELP(" ",1,"CSE010EXP.01",,"Nao foi informado o arquivo destino para a exportacao.",4,0)
	lProcess := .F.

ELSE
	
	IF At('.',MV_PAR03) == 0
		cFile	:= ALLTRIM(MV_PAR03)+'.CSV'
	ELSE
		cFile	:= ALLTRIM(MV_PAR03)
	ENDIF	

	IF File( cFile )
		FErase( cFile )
	Endif

	nHandle := FCreate( cFile )

   	If nHandle <= 0
		For nX := 1 To 5
			MsAguarde( {|| Sleep( 2000 ) },  "Exportacao do cadastro de plano de entidades contabeis" , "Criando arquivo destino da exportacao")

			nHandle := FCreate( cFile )
			
			IF nHandle > 0
				Exit
			Endif
		Next

		If nHandle <= 0
			HELP(" ",1,"CSE010EXP.02",,"Nao foi possivel criar o arquivo destino para a exportacao.",4,0)
			lProcess := .F.
		Endif
	EndIf
    
ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Garante o posicionamento do CV0 com base  ≥
//≥nos parametros da PARAMBOX()              ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
DbSelectArea("CV0")
DbSetOrder(1) //CV0_FILIAL+CV0_PLANO+CV0_CODIGO
IF !CV0->(DbSeek(xFilial("CV0")+MV_PAR01))

	HELP(" ",1,"CSE010EXP.03",,"Nao foi possivel localizar o plano de cadastro de entidades contabeis selecionado.",4,0)
	lProcess := .F.

ENDIF

IF lProcess

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥Exportacao da tabela CV0 - identificador 0≥
	//≥Plano de entidades contabeis - campos     ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	aEstruCV0 :=	CV0->(DbStruct())

	cLine :="0;CV0;"
	For nX:=1 To Len(aEstruCV0)
		cLine	+=	aEstruCV0[nX,1]+";"
	Next	
	cLine := Substr(cLine,1,Len(cLine)-1) + CRLF
	FWrite(nHandle,cLine,Len(cLine))

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥Exportacao da tabela CV0 - identificador 1≥
	//≥Plano de entidades contabeis - dados  	   ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	aTxt := {}
	DbSelectArea("CV0")
	DbSetOrder(1) //CV0_FILIAL+CV0_PLANO+CV0_CODIGO
	DbSeek(xFilial("CV0")+MV_PAR01)
	While  CV0->(!Eof()) .AND.;
		    CV0->(CV0_FILIAL+CV0_PLANO) == xFilial("CV0")+MV_PAR01

		AAdd(aTxt,{})

		For nX:=1 To Len(aEstruCV0)
			Do Case
			Case aEstruCV0[nX,2] == "C"
				AADd(aTxt[Len(aTxt)],IIF( EMPTY(FieldGet(FieldPos(aEstruCV0[nX,1]))), '""', FieldGet(FieldPos(aEstruCV0[nX,1])) ))
			Case aEstruCV0[nX,2] == "L"
				AADd(aTxt[Len(aTxt)],If(FieldGet(FieldPos(aEstruCV0[nX,1])),"T","F"))
			Case aEstruCV0[nX,2] == "D"
				AADd(aTxt[Len(aTxt)],IIF( EMPTY(Dtos(FieldGet(FieldPos(aEstruCV0[nX,1])))), '""', Dtos(FieldGet(FieldPos(aEstruCV0[nX,1]))) ))
			Case aEstruCV0[nX,2] == "N"
				AADd(aTxt[Len(aTxt)],Str(FieldGet(FieldPos(aEstruCV0[nX,1]))))
			EndCase					
		Next
		CV0->(DbSkip())
	End          

	For nX:= 1 To Len(aTxt)
		cLine	:=	"1;CV0;" 
		For nY:=1 To Len(aTxt[nX])
			cLine  +=   aTxt[nX,nY]+";"
		Next                      
		cLine := Substr(cLine,1,Len(cLine)-1) + CRLF
		FWrite(nHandle,cLine,Len(cLine))                          	
	Next	

	FClose(nHandle)

ENDIF

IF lProcess
	Aviso("Processameto concluido","Exportacao do plano de entidades contabeis efetuado com sucesso.",{"Concluir"})
ELSE
	Aviso("Processamento com criticas","Nao foi possivel efetuar a exportacao do plano de entidades contabeis.",{"Concluir"})
ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Restaura as variaveis de ambiente                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
RestInter()
RestArea(aArea)
Return(.T.)

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ CSE010VN ∫Autor  ≥ TOTVS Protheus     ∫ Data ≥  06/01/2014 ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ FUNCAO QUE DIRECIONA AS CHAMADAS DAS VINCULACOES           ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ CONTABILIDADE GERENCIAL - ORCAMENTO CONTABIL               ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
USER FUNCTION CSE010VN(nOpcCad)
LOCAL aArea := GetArea()

DO CASE	

	CASE nOpcCad == 1

		DbSelectArea("CT1")
		DbSetOrder(1)
		CSE010V1PB()
		
	CASE nOpcCad == 2

		DbSelectArea("SB1")
		DbSetOrder(1)

		DbSelectArea("CT1")
		DbSetOrder(1)

		DbSelectArea("CV0")
		DbSetOrder(1)
		CSE010V2PB()

	CASE nOpcCad == 3

		DbSelectArea("SZ2")
		DbSetOrder(1)

		DbSelectArea("CV0")
		DbSetOrder(1)
		CSE010V3PB()

ENDCASE

RestArea(aArea)
RETURN

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010V1PB∫Autor  ≥ TOTVS Protheus     ∫ Data ≥  06/01/2014 ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ VINCULA AS CONTAS CONTABEIS AOS TIPOS DE ATIVIDADES (.CSV) ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ CONTABILIDADE GERENCIAL - ORCAMENTO CONTABIL               ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
STATIC FUNCTION CSE010V1PB()

Local aArea		:= GetArea()

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥ Perguntas para parametrizacao da rotina (PARAMBOX)          			≥
//≥ MV_PAR01   - Arquivo a importar:           						     	≥
//≥ MV_PAR02   - Entidade contabil:                					     	≥
//≥ MV_PAR03   - Entidade orcamentaria:            					     	≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
If CSE010PVI(1) .AND.;//Parambox da rotina de exportacao do orcamento
	ApMsgNoYes(	"Confirma a vinculacao do plano de contas aos tipos de atividades conforme regra do arquivo selecionado?","ENTIDADES CONTABEIS x ENTIDADES ORCAMENTARIAS: Vincular")
				MsgRun("Vinculando cadastro de plano de contas ao cadastro de tipos de atividades...","ENTIDADES CONTABEIS x ENTIDADES ORCAMENTARIAS: Vincular",{|| CSE010V1PR()})
ENDIF

RestArea(aArea)
RETURN

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010V1PR∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Vincula o cadastro de plano de contas com os tp. ativid.   ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/

STATIC FUNCTION CSE010V1PR()

Local aArea			:= GetArea()
Local cLine			:=	""
Local aField 		:= {{}}
Local aData   		:= {{}}
Local aTempRead		:= {}
Local aTempData		:= {}
Local nLenFields	:= 0
Local nLenData		:= 0
Local lProcess		:= .T.
Local nModo			:= 0      
Local nX,nY,nZ
Local nPosField		:= 0

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Identificadores das posicoes dos alias nos arrays de trabalho              ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
Local aAlias		:= {"CT1"}
Local nPosAlias		:= 0
Local cAliasCab		:= "CT1"
Local aAliasIt		:= {"CT1"}
Local aFieldObr		:= {}

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Variaveis para controle das posicoes dos campos obrigatorios da estrutura  ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
Local nPosCT1CTA	:= 0
Local nPosE06CTA	:= 0
Local nPosE06DSC	:= 0

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Adiciona os campos obrigatorios da estrutura do arquivo para validacao     ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
AADD(aFieldObr,"CT1_CONTA")
AADD(aFieldObr,"CT1_ENT06")
AADD(aFieldObr,"CT1_E06DSC")

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Salva as variaveis de ambiente                                             ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
SaveInter()

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Inicio do processamento                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Validacoes preliminares                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF (nHandle := FT_FUse(AllTrim(MV_PAR01)))== -1
	HELP(" ",1,"CSE010V1PR.01",,"Nao foi possivel abrir o arquivo selecionado para processamento.",4,0)//"Nao foi possivel abrir o arquivo selecionado para importacao."
	lProcess := .F.
ENDIF

IF MV_PAR02 != 1 // PLANO DE CONTAS
	HELP(" ",1,"CSE010V1PR.02",,"Opcao selecionada invalida. Somente eh permitido vincular ao Plano de Contas",4,0)//"Opcao selecionada invalida. Somente eh permitido vincular ao Plano de Contas"
	lProcess := .F.
ENDIF

IF MV_PAR03 != 1 // TIPO DE ATIVIDADE
	HELP(" ",1,"CSE010V1PR.03",,"Opcao selecionada invalida. Somente eh permitido vincular com Tipo de Atividade",4,0)//"Opcao selecionada invalida. Somente eh permitido vincular com Tipo de Atividade"
	lProcess := .F.
ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥1a Etapa: Leitura do arquivo em conversao nos arrays de trabalho ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF lProcess

	WHILE !FT_FEOF()
	
		cLine		:= FT_FREADLN()
		aTempRead 	:= StrtoKarr(cLine,";")
	
		IF 		aTempRead[1] == "0" // Linhas de estrutrua de campos
			
			IF (nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(aTempRead[2]) == cAlias})) > 0

				// Elimina as duas primeiras posicoes: Identificador e Alias
				FOR nX := 3 TO LEN(aTempRead)
					AADD(aField[nPosAlias],{aTempRead[nX],X3TIPO(aTempRead[nX])})
				NEXT nX
				
			ELSE
				HELP(" ",1,"CSE010V1PR.04",,"Erro na estrutura do arquivo selecionado para importacao."+CRLF+;
											"Alias invalido: "+ALLTRIM(aTempRead[2]),4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Alias invalido: "
				lProcess := .F.
				EXIT
			ENDIF
	
		ELSEIF	aTempRead[1] $ "1/2"	// Linha de dados: CT1(1)
			
			IF (nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(aTempRead[2]) == cAlias})) > 0

				aTempData := {}
				
				// Elimina as duas primeiras posicoes: Identificador e Alias
				FOR nX := 3 TO LEN(aTempRead)
					AADD(aTempData,aTempRead[nX])			
				NEXT nX		

				AADD(aData[nPosAlias],aClone(aTempData))
				
			ELSE
				HELP(" ",1,"CSE010V1PR.05",,"Erro na estrutura do arquivo selecionado para importacao."+CRLF+;
											"Alias invalido: "+ALLTRIM(aTempRead[2]),4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Alias invalido: "
				lProcess := .F.
				EXIT
			ENDIF

		ELSE
			HELP(" ",1,"CSE010V1PR.06",,"Erro na estrutura do arquivo selecionado para importacao."+CRLF+;
										"Identificador de linha invalido: "+aTempRead[1],4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Identificador de linha invalido: "
			lProcess := .F.
			EXIT
		ENDIF
	
		FT_FSKIP()
		
	END

	FT_FUSE()
	FCLOSE(nHandle)

ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥2a Etapa: Validacao da estrutura de campos e conteudos dos arrays≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF lProcess

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥2.1: Validacao da quantidade de estruturas de campos x Alias     ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	IF LEN(aField) != LEN(aAlias)

		HELP(" ",1,"CSE010V1PR.09",,"Erro na estrutura de campos informada no arquivo selecionado para importacao."+CRLF+;
									"Quantidade de estruturas suportadas/necessarias: "+STRZERO(LEN(aAlias))+CRLF+;
									"Quantidade de estruturas informadas no arquivo : "+STRZERO(LEN(aField))+CRLF,4,0)
		lProcess := .F.		
	
	ELSE

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥2.2: Validacao do dicionario de dados x estrutura de campos      ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		FOR nX := 1 TO LEN(aAlias) // 1-> CT1

			FOR nY := 1 TO LEN(aField[nX])

				IF (aAlias[nX])->(FieldPos(aField[nX][nY][1])) == 0

					HELP(" ",1,"CSE010V1PR.10",,"Erro na estrutura de campos informada no arquivo selecionado para importacao."+CRLF+;
												"Campo invalido: "+aField[nX][nY][1],4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Identificador de linha invalido: "
					lProcess := .F.
					EXIT
				
				ENDIF

				//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
				//≥2.2.1: Salva a posicao dos campos obrigatorios para validacao posterior ≥
				//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ			
				DO CASE
					CASE aField[nX][nY][1] == "CT1_CONTA"
						nPosCT1CTA := nY

					CASE aField[nX][nY][1] == "CT1_ENT06"
						nPosE06CTA := nY

					CASE aField[nX][nY][1] == "CT1_E06DSC"
						nPosE06DSC := nY											
				ENDCASE

			NEXT nY
		
		NEXT nX

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥2.3: Validacao dos campos obrigatorios na estrutura do arquivo     ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		IF 		nPosCT1CTA == 0
			HELP(" ",1,"CSE010V1PR.11",,"Campo obrigatorio nao presente na estrutura do arquivo."+CRLF+;
										"Campo: CT1_CONTA",4,0)
			lProcess := .F.

		ELSEIF 	nPosE06CTA == 0
			HELP(" ",1,"CSE010V1PR.11",,"Campo obrigatorio nao presente na estrutura do arquivo."+CRLF+;
										"Campo: CT1_ENT06",4,0)
			lProcess := .F.

		ELSEIF 	nPosE06DSC == 0
			HELP(" ",1,"CSE010V1PR.11",,"Campo obrigatorio nao presente na estrutura do arquivo."+CRLF+;
										"Campo: CT1_E06DSC",4,0)
			lProcess := .F.
		
		ENDIF

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥2.4: Validacao da quantidade de itens das linhas de dados x campos ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		FOR nX := 1 TO LEN(aAlias)
			
			nLenFields := Len(aField[nX])
			
			FOR nY := 1 TO LEN(aData[nX])

				nLenData := Len(aData[nX][nY])
							
				IF nLenData != nLenFields

					HELP(" ",1,"CSE010V1PR.12",,"Erro na estrutura de campos informada no arquivo selecionado para importacao."+CRLF+;
												"Quantidade de campos invalida: "+CRLF+;
												"Alias: "+aAlias[nX]	+" / Campos: "+STRZERO(nLenFields)+CRLF+;
												"Linha: "+STRZERO(nY)	+" / Campos: "+STRZERO(nLenData)+" .",4,0)
					lProcess := .F.
					EXIT
				
				ENDIF	
			
			NEXT nY
		
		NEXT nX
		
	ENDIF
	
ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥3a Etapa: Efetua a gravacao da tabela CT1 atualizando o          ≥
//≥          vinculo com o cadastro de tipos de atividades          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF lProcess

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥ INICIO DA TRANSACAO                                               ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	BEGIN TRANSACTION

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥3.1: Gravacao dos itens do cadastro do plano de entidades contabeis≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	
	FOR nX := 1 TO Len(aAliasIt)

		DbSelectArea(aAliasIt[nX])
		DbSetOrder(1)
                                        
		IF (nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(cAlias) == ALLTRIM(aAliasIt[nX])})) > 0

			FOR nY := 1 TO Len(aData[nPosAlias])

				IF (aAliasIt[nX])->(DbSeek(xFilial(aAliasIt[nX])+ aData[nPosAlias][nY][nPosCT1CTA]))
				
					RecLock(aAliasIt[nX],.F.)
					
						FieldPut(FieldPos("CT1_ENT06") , aData[nPosAlias][nY][nPosE06CTA])
						FieldPut(FieldPos("CT1_E06DSC"), aData[nPosAlias][nY][nPosE06DSC])
						
					MsUnlock()

			    ENDIF

			NEXT nY

		ELSE
			HELP(" ",1,"CSE010V1PR.13",,"Erro na gravacao dos dados nos arquivos de itens."+CRLF+;
										"Alias de itens: "+aAliasIt[nX],4,0)
			lProcess := .F.
			DisarmTransaction()
			EXIT
		ENDIF				
		
	NEXT nX

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥ FIM DA TRANSACAO                                                  ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	END TRANSACTION

ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Restaura as variaveis de ambiente                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
RestInter()
RestArea(aArea)
Return(.T.)

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010V2PB∫Autor  ≥ TOTVS Protheus     ∫ Data ≥  06/01/2014 ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ VINCULA OS PRODUTOS OS PRODUTOS COMERCIALIZADOS (.CSV)     ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ CONTABILIDADE GERENCIAL - ORCAMENTO CONTABIL               ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
STATIC FUNCTION CSE010V2PB()

Local aArea		:= GetArea()

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥ Perguntas para parametrizacao da rotina (PARAMBOX)          			≥
//≥ MV_PAR01   - Arquivo a importar:           						     	≥
//≥ MV_PAR02   - Entidade contabil:                					     	≥
//≥ MV_PAR03   - Entidade orcamentaria:            					     	≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
If CSE010PVI(2) .AND.;//Parambox da rotina de exportacao do orcamento
	ApMsgNoYes(	"Confirma a atualizacao do vinculo entre o cadastro de produtos e o entidade de produtos comercializados conforme regra do arquivo selecionado?","ENTIDADES SISTEMICAS x ENTIDADES ORCAMENTARIAS: Vincular")
				MsgRun("Vinculando cadastro de produtos ao cadastro de produtos comercializados...","ENTIDADES SISTEMICAS x ENTIDADES ORCAMENTARIAS: Vincular",{|| CSE010V2PR()})
ENDIF

RestArea(aArea)
RETURN

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010V2PR∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Vincula o cadastro de produtos ao cadastro de prod.comerc. ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/

STATIC FUNCTION CSE010V2PR()

Local aArea			:= GetArea()
Local cLine			:=	""
Local aField 		:= {{}}
Local aData   		:= {{}}
Local aTempRead		:= {}
Local aTempData		:= {}
Local nLenFields	:= 0
Local nLenData		:= 0
Local lProcess		:= .T.
Local nModo			:= 0      
Local nX,nY,nZ
Local nPosField		:= 0

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Identificadores das posicoes dos alias nos arrays de trabalho              ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
Local aAlias		:= {"SB1"}
Local nPosAlias		:= 0
Local cAliasCab		:= "SB1"
Local aAliasIt		:= {"SB1"}
Local aFieldObr		:= {}

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Variaveis para controle das posicoes dos campos obrigatorios da estrutura  ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
Local nPosSB1FIL	:= 0
Local nPosSB1COD	:= 0
Local nPosSB1DSC	:= 0
Local nPosE07CTA	:= 0
Local nPosE07DSC	:= 0

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Adiciona os campos obrigatorios da estrutura do arquivo para validacao     ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
AADD(aFieldObr,"B1_FILIAL")
AADD(aFieldObr,"B1_COD")
AADD(aFieldObr,"B1_DESC")
AADD(aFieldObr,"B1_E07CTA")
AADD(aFieldObr,"B1_E07DSC")

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Salva as variaveis de ambiente                                             ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
SaveInter()

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Inicio do processamento                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Validacoes preliminares                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF (nHandle := FT_FUse(AllTrim(MV_PAR01)))== -1
	HELP(" ",1,"CSE010V2PR.01",,"Nao foi possivel abrir o arquivo selecionado para processamento.",4,0)//"Nao foi possivel abrir o arquivo selecionado para importacao."
	lProcess := .F.
ENDIF

IF MV_PAR02 != 1 // CADASTRO DE PRODUTOS
	HELP(" ",1,"CSE010V2PR.02",,"Opcao selecionada invalida. Somente eh permitido vincular ao Cadastro de Produtos",4,0)//"Opcao selecionada invalida. Somente eh permitido vincular ao Plano de Contas"
	lProcess := .F.
ENDIF

IF MV_PAR03 != 1 // CADASTRO DE PRODUTOS COMERCIALIZADOS
	HELP(" ",1,"CSE010V2PR.03",,"Opcao selecionada invalida. Somente eh permitido vincular com Produtos Comercializados",4,0)//"Opcao selecionada invalida. Somente eh permitido vincular com Tipo de Atividade"
	lProcess := .F.
ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥1a Etapa: Leitura do arquivo em conversao nos arrays de trabalho ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF lProcess

	WHILE !FT_FEOF()
	
		cLine		:= FT_FREADLN()
		aTempRead 	:= StrtoKarr(cLine,";")
	
		IF 		aTempRead[1] == "0" // Linhas de estrutrua de campos
			
			IF (nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(aTempRead[2]) == cAlias})) > 0

				// Elimina as duas primeiras posicoes: Identificador e Alias
				FOR nX := 3 TO LEN(aTempRead)
					AADD(aField[nPosAlias],{aTempRead[nX],X3TIPO(aTempRead[nX])})
				NEXT nX
				
			ELSE
				HELP(" ",1,"CSE010V2PR.04",,"Erro na estrutura do arquivo selecionado para importacao."+CRLF+;
											"Alias invalido: "+ALLTRIM(aTempRead[2]),4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Alias invalido: "
				lProcess := .F.
				EXIT
			ENDIF
	
		ELSEIF	aTempRead[1] $ "1/2"	// Linha de dados: CT1(1)
			
			IF (nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(aTempRead[2]) == cAlias})) > 0

				aTempData := {}
				
				// Elimina as duas primeiras posicoes: Identificador e Alias
				FOR nX := 3 TO LEN(aTempRead)
					AADD(aTempData,aTempRead[nX])			
				NEXT nX		

				AADD(aData[nPosAlias],aClone(aTempData))
				
			ELSE
				HELP(" ",1,"CSE010V2PR.05",,"Erro na estrutura do arquivo selecionado para importacao."+CRLF+;
											"Alias invalido: "+ALLTRIM(aTempRead[2]),4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Alias invalido: "
				lProcess := .F.
				EXIT
			ENDIF

		ELSE
			HELP(" ",1,"CSE010V2PR.06",,"Erro na estrutura do arquivo selecionado para importacao."+CRLF+;
										"Identificador de linha invalido: "+aTempRead[1],4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Identificador de linha invalido: "
			lProcess := .F.
			EXIT
		ENDIF
	
		FT_FSKIP()
		
	END

	FT_FUSE()
	FCLOSE(nHandle)

ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥2a Etapa: Validacao da estrutura de campos e conteudos dos arrays≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF lProcess

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥2.1: Validacao da quantidade de estruturas de campos x Alias     ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	IF LEN(aField) != LEN(aAlias)

		HELP(" ",1,"CSE010V2PR.09",,"Erro na estrutura de campos informada no arquivo selecionado para importacao."+CRLF+;
									"Quantidade de estruturas suportadas/necessarias: "+STRZERO(LEN(aAlias))+CRLF+;
									"Quantidade de estruturas informadas no arquivo : "+STRZERO(LEN(aField))+CRLF,4,0)
		lProcess := .F.		
	
	ELSE

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥2.2: Validacao do dicionario de dados x estrutura de campos      ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		FOR nX := 1 TO LEN(aAlias) // 1-> SB1

			FOR nY := 1 TO LEN(aField[nX])

				IF (aAlias[nX])->(FieldPos(aField[nX][nY][1])) == 0 .AND. aScan( aFieldObr,{ |cField| ALLTRIM(cField) == ALLTRIM( aField[nX][nY][1] ) } ) == 0

					HELP(" ",1,"CSE010V2PR.10",,"Erro na estrutura de campos informada no arquivo selecionado para importacao."+CRLF+;
												"Campo invalido: "+aField[nX][nY][1],4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Identificador de linha invalido: "
					lProcess := .F.
					EXIT
				
				ENDIF

				//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
				//≥2.2.1: Salva a posicao dos campos obrigatorios para validacao posterior ≥
				//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ			
				DO CASE
					CASE aField[nX][nY][1] == "B1_FILIAL"
						nPosSB1FIL := nY

					CASE aField[nX][nY][1] == "B1_COD"
						nPosSB1COD := nY

					CASE aField[nX][nY][1] == "B1_DESC"
						nPosSB1DSC := nY

					CASE aField[nX][nY][1] == "B1_E07CTA"
						nPosE07CTA := nY

					CASE aField[nX][nY][1] == "B1_E07DSC"
						nPosE07DSC := nY											
				ENDCASE

			NEXT nY
		
		NEXT nX

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥2.3: Validacao dos campos obrigatorios na estrutura do arquivo     ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		IF 		nPosSB1FIL == 0
			HELP(" ",1,"CSE010V2PR.11",,"Campo obrigatorio nao presente na estrutura do arquivo."+CRLF+;
										"Campo: B1_FILIAL",4,0)
			lProcess := .F.

		ELSEIF 	nPosSB1COD == 0
			HELP(" ",1,"CSE010V2PR.11",,"Campo obrigatorio nao presente na estrutura do arquivo."+CRLF+;
										"Campo: B1_COD",4,0)
			lProcess := .F.


		ELSEIF 	nPosSB1DSC == 0
			HELP(" ",1,"CSE010V2PR.11",,"Campo obrigatorio nao presente na estrutura do arquivo."+CRLF+;
										"Campo: B1_DESC",4,0)
			lProcess := .F.

		ELSEIF 	nPosE07CTA == 0
			HELP(" ",1,"CSE010V2PR.11",,"Campo obrigatorio nao presente na estrutura do arquivo."+CRLF+;
										"Campo: B1_E07CTA",4,0)
			lProcess := .F.

		ELSEIF 	nPosE07DSC == 0
			HELP(" ",1,"CSE010V2PR.11",,"Campo obrigatorio nao presente na estrutura do arquivo."+CRLF+;
										"Campo: B1_E07DSC",4,0)
			lProcess := .F.
		
		ENDIF

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥2.4: Validacao da quantidade de itens das linhas de dados x campos ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		FOR nX := 1 TO LEN(aAlias)
			
			nLenFields := Len(aField[nX])
			
			FOR nY := 1 TO LEN(aData[nX])

				nLenData := Len(aData[nX][nY])
							
				IF nLenData != nLenFields

					HELP(" ",1,"CSE010V2PR.12",,"Erro na estrutura de campos informada no arquivo selecionado para importacao."+CRLF+;
												"Quantidade de campos invalida: "+CRLF+;
												"Alias: "+aAlias[nX]	+" / Campos: "+STRZERO(nLenFields)+CRLF+;
												"Linha: "+STRZERO(nY)	+" / Campos: "+STRZERO(nLenData)+" .",4,0)
					lProcess := .F.
					EXIT
				
				ENDIF	
			
			NEXT nY
		
		NEXT nX
		
	ENDIF
	
ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥3a Etapa: Efetua a gravacao da tabela CT1 atualizando o          ≥
//≥          vinculo com o cadastro de tipos de atividades          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF lProcess

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥ INICIO DA TRANSACAO                                               ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	BEGIN TRANSACTION

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥3.1: Gravacao dos itens do cadastro do plano de entidades contabeis≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	
	FOR nX := 1 TO Len(aAliasIt)

		DbSelectArea(aAliasIt[nX])
		DbSetOrder(1)
                                        
		IF (nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(cAlias) == ALLTRIM(aAliasIt[nX])})) > 0

			FOR nY := 1 TO Len(aData[nPosAlias])

				IF (aAliasIt[nX])->(DbSeek( aData[nPosAlias][nY][nPosSB1FIL] + aData[nPosAlias][nY][nPosSB1COD] ) )
				
					RecLock(aAliasIt[nX],.F.)
					
						FieldPut(FieldPos("B1_EC07DB"), aData[nPosAlias][nY][nPosE07CTA])
						FieldPut(FieldPos("B1_EC07CR"), aData[nPosAlias][nY][nPosE07CTA])
						
					MsUnlock()
					
					IF CV0->( DbSeek(xFilial("CV0")+"07"+aData[nPosAlias][nY][nPosE07CTA]) )
						RecLock("CV0",.F.)
							
							CV0->CV0_ENT01 		:= SB1->B1_CONTA
							CV0->CV0_E01DSC 	:= GetAdvFVal("CT1","CT1_DESC01",xFilial("CT1")+SB1->B1_CONTA,1,"")
						
						MsUnLock()			    	
					ENDIF
			    
			    ENDIF

			NEXT nY

		ELSE
			HELP(" ",1,"CSE010V2PR.13",,"Erro na gravacao dos dados nos arquivos de itens."+CRLF+;
										"Alias de itens: "+aAliasIt[nX],4,0)
			lProcess := .F.
			DisarmTransaction()
			EXIT
		ENDIF				
		
	NEXT nX

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥ FIM DA TRANSACAO                                                  ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	END TRANSACTION

ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Restaura as variaveis de ambiente                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
RestInter()
RestArea(aArea)
Return(.T.)

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010V3PB∫Autor  ≥ TOTVS Protheus     ∫ Data ≥  06/01/2014 ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ VINCULA OS CANAIS DE VENDAS (SZ2) COM O CNV (CV0 - ENT08)  ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ CONTABILIDADE GERENCIAL - ORCAMENTO CONTABIL               ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
STATIC FUNCTION CSE010V3PB()

Local aArea		:= GetArea()

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥ Perguntas para parametrizacao da rotina (PARAMBOX)          			≥
//≥ MV_PAR01   - Arquivo a importar:           						     	≥
//≥ MV_PAR02   - Entidade sistemica:               					     	≥
//≥ MV_PAR03   - Entidade orcamentaria:            					     	≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
If CSE010PVI(3) .AND.;//Parambox da rotina de exportacao do orcamento
	ApMsgNoYes(	"Confirma a atualizacao do vinculo entre o cadastro de canais de vendas e a entidade contabil canais de vendas conforrme regra do arquivo selecionado?","ENTIDADES SISTEMICAS x ENTIDADES ORCAMENTARIAS: Vincular")
				MsgRun("Vinculando cadastro de canais de vendas a entidade contabil canal de vendas...","ENTIDADES SISTEMICAS x ENTIDADES ORCAMENTARIAS: Vincular",{|| CSE010V3PR()})
ENDIF

RestArea(aArea)
RETURN

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥CSE010V3PR∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ VINCULA O CADASTRO DE CANAIS DE VENDAS (SZ2) AO CNV.EC08   ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/

STATIC FUNCTION CSE010V3PR()

Local aArea			:= GetArea()
Local cLine			:=	""
Local aField 		:= {{}}
Local aData   		:= {{}}
Local aTempRead		:= {}
Local aTempData		:= {}
Local nLenFields	:= 0
Local nLenData		:= 0
Local lProcess		:= .T.
Local nModo			:= 0      
Local nX,nY,nZ
Local nPosField		:= 0

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Identificadores das posicoes dos alias nos arrays de trabalho              ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
Local aAlias		:= {"SZ2"}
Local nPosAlias		:= 0
Local cAliasCab		:= "SZ2"
Local aAliasIt		:= {"SZ2"}
Local aFieldObr		:= {}

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Variaveis para controle das posicoes dos campos obrigatorios da estrutura  ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
Local nPosSZ2COD	:= 0
Local nPosSZ2CNV	:= 0
Local nPosE08CTA	:= 0
Local nPosE08DSC	:= 0

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Adiciona os campos obrigatorios da estrutura do arquivo para validacao     ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
AADD(aFieldObr,"Z2_CODIGO")
AADD(aFieldObr,"Z2_CANAL")
AADD(aFieldObr,"Z2_E08CTA")
AADD(aFieldObr,"Z2_E08DSC")

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Salva as variaveis de ambiente                                             ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
SaveInter()

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Inicio do processamento                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Validacoes preliminares                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF (nHandle := FT_FUse(AllTrim(MV_PAR01)))== -1
	HELP(" ",1,"CSE010V3PR.01",,"Nao foi possivel abrir o arquivo selecionado para processamento.",4,0)//"Nao foi possivel abrir o arquivo selecionado para importacao."
	lProcess := .F.
ENDIF

IF MV_PAR02 != 1 // CADASTRO DE PRODUTOS
	HELP(" ",1,"CSE010V3PR.02",,"Opcao selecionada invalida. Somente eh permitido vincular ao Cadastro de Canais de Vendas",4,0)//"Opcao selecionada invalida. Somente eh permitido vincular ao Plano de Contas"
	lProcess := .F.
ENDIF

IF MV_PAR03 != 1 // CADASTRO DE PRODUTOS COMERCIALIZADOS
	HELP(" ",1,"CSE010V3PR.03",,"Opcao selecionada invalida. Somente eh permitido vincular com a Entidade Canais de Vendas",4,0)//"Opcao selecionada invalida. Somente eh permitido vincular com Tipo de Atividade"
	lProcess := .F.
ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥1a Etapa: Leitura do arquivo em conversao nos arrays de trabalho ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF lProcess

	WHILE !FT_FEOF()
	
		cLine		:= FT_FREADLN()
		aTempRead 	:= StrtoKarr(cLine,";")
	
		IF 		aTempRead[1] == "0" // Linhas de estrutrua de campos
			
			IF (nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(aTempRead[2]) == cAlias})) > 0

				// Elimina as duas primeiras posicoes: Identificador e Alias
				FOR nX := 3 TO LEN(aTempRead)
					AADD(aField[nPosAlias],{aTempRead[nX],X3TIPO(aTempRead[nX])})
				NEXT nX
				
			ELSE
				HELP(" ",1,"CSE010V3PR.04",,"Erro na estrutura do arquivo selecionado para importacao."+CRLF+;
											"Alias invalido: "+ALLTRIM(aTempRead[2]),4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Alias invalido: "
				lProcess := .F.
				EXIT
			ENDIF
	
		ELSEIF	aTempRead[1] $ "1/2"	// Linha de dados: CT1(1)
			
			IF (nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(aTempRead[2]) == cAlias})) > 0

				aTempData := {}
				
				// Elimina as duas primeiras posicoes: Identificador e Alias
				FOR nX := 3 TO LEN(aTempRead)
					AADD(aTempData,aTempRead[nX])			
				NEXT nX		

				AADD(aData[nPosAlias],aClone(aTempData))
				
			ELSE
				HELP(" ",1,"CSE010V3PR.05",,"Erro na estrutura do arquivo selecionado para importacao."+CRLF+;
											"Alias invalido: "+ALLTRIM(aTempRead[2]),4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Alias invalido: "
				lProcess := .F.
				EXIT
			ENDIF

		ELSE
			HELP(" ",1,"CSE010V3PR.06",,"Erro na estrutura do arquivo selecionado para importacao."+CRLF+;
										"Identificador de linha invalido: "+aTempRead[1],4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Identificador de linha invalido: "
			lProcess := .F.
			EXIT
		ENDIF
	
		FT_FSKIP()
		
	END

	FT_FUSE()
	FCLOSE(nHandle)

ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥2a Etapa: Validacao da estrutura de campos e conteudos dos arrays≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF lProcess

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥2.1: Validacao da quantidade de estruturas de campos x Alias     ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	IF LEN(aField) != LEN(aAlias)

		HELP(" ",1,"CSE010V3PR.09",,"Erro na estrutura de campos informada no arquivo selecionado para importacao."+CRLF+;
									"Quantidade de estruturas suportadas/necessarias: "+STRZERO(LEN(aAlias))+CRLF+;
									"Quantidade de estruturas informadas no arquivo : "+STRZERO(LEN(aField))+CRLF,4,0)
		lProcess := .F.		
	
	ELSE

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥2.2: Validacao do dicionario de dados x estrutura de campos      ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		FOR nX := 1 TO LEN(aAlias) // 1-> SB1

			FOR nY := 1 TO LEN(aField[nX])

				IF (aAlias[nX])->(FieldPos(aField[nX][nY][1])) == 0 .AND. aScan( aFieldObr,{ |cField| ALLTRIM(cField) == ALLTRIM( aField[nX][nY][1] ) } ) == 0

					HELP(" ",1,"CSE010V3PR.10",,"Erro na estrutura de campos informada no arquivo selecionado para importacao."+CRLF+;
												"Campo invalido: "+aField[nX][nY][1],4,0)//"Erro na estrutura do arquivo selecionado para importacao."###"Identificador de linha invalido: "
					lProcess := .F.
					EXIT
				
				ENDIF

				//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
				//≥2.2.1: Salva a posicao dos campos obrigatorios para validacao posterior ≥
				//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ			
				DO CASE
					CASE aField[nX][nY][1] == "Z2_CODIGO"
						nPosSZ2COD := nY

					CASE aField[nX][nY][1] == "Z2_CANAL"
						nPosSZ2CNV := nY

					CASE aField[nX][nY][1] == "Z2_E08CTA"
						nPosE08CTA := nY

					CASE aField[nX][nY][1] == "Z2_E08DSC"
						nPosE08DSC := nY											
				ENDCASE

			NEXT nY
		
		NEXT nX

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥2.3: Validacao dos campos obrigatorios na estrutura do arquivo     ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		IF 	nPosSZ2COD == 0
			HELP(" ",1,"CSE010V3PR.11",,"Campo obrigatorio nao presente na estrutura do arquivo."+CRLF+;
										"Campo: Z2_CODIGO",4,0)
			lProcess := .F.


		ELSEIF 	nPosSZ2CNV == 0
			HELP(" ",1,"CSE010V3PR.11",,"Campo obrigatorio nao presente na estrutura do arquivo."+CRLF+;
										"Campo: Z2_CANAL",4,0)
			lProcess := .F.

		ELSEIF 	nPosE08CTA == 0
			HELP(" ",1,"CSE010V3PR.11",,"Campo obrigatorio nao presente na estrutura do arquivo."+CRLF+;
										"Campo: Z2_E08CTA",4,0)
			lProcess := .F.

		ELSEIF 	nPosE08DSC == 0
			HELP(" ",1,"CSE010V3PR.11",,"Campo obrigatorio nao presente na estrutura do arquivo."+CRLF+;
										"Campo: Z2_E08DSC",4,0)
			lProcess := .F.
		
		ENDIF

		//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
		//≥2.4: Validacao da quantidade de itens das linhas de dados x campos ≥
		//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
		FOR nX := 1 TO LEN(aAlias)
			
			nLenFields := Len(aField[nX])
			
			FOR nY := 1 TO LEN(aData[nX])

				nLenData := Len(aData[nX][nY])
							
				IF nLenData != nLenFields

					HELP(" ",1,"CSE010V3PR.12",,"Erro na estrutura de campos informada no arquivo selecionado para importacao."+CRLF+;
												"Quantidade de campos invalida: "+CRLF+;
												"Alias: "+aAlias[nX]	+" / Campos: "+STRZERO(nLenFields)+CRLF+;
												"Linha: "+STRZERO(nY)	+" / Campos: "+STRZERO(nLenData)+" .",4,0)
					lProcess := .F.
					EXIT
				
				ENDIF	
			
			NEXT nY
		
		NEXT nX
		
	ENDIF
	
ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥3a Etapa: Efetua a gravacao da tabela CT1 atualizando o          ≥
//≥          vinculo com o cadastro de tipos de atividades          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
IF lProcess

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥ INICIO DA TRANSACAO                                               ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	BEGIN TRANSACTION

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥3.1: Gravacao dos itens do cadastro do plano de entidades contabeis≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	
	FOR nX := 1 TO Len(aAliasIt)

		DbSelectArea(aAliasIt[nX])
		DbSetOrder(1)
                                        
		IF (nPosAlias := aScan(aAlias,{|cAlias| ALLTRIM(cAlias) == ALLTRIM(aAliasIt[nX])})) > 0

			FOR nY := 1 TO Len(aData[nPosAlias])

				IF (aAliasIt[nX])->(DbSeek( xFilial("SZ2") + aData[nPosAlias][nY][nPosSZ2COD] ) )
				
					RecLock(aAliasIt[nX],.F.)
					
						FieldPut(FieldPos("Z2_EC08DB"), aData[nPosAlias][nY][nPosE08CTA])
						FieldPut(FieldPos("Z2_EC08CR"), aData[nPosAlias][nY][nPosE08CTA])
						
					MsUnlock()
					
			    ENDIF

			NEXT nY

		ELSE
			HELP(" ",1,"CSE010V3PR.13",,"Erro na gravacao dos dados nos arquivos de itens."+CRLF+;
										"Alias de itens: "+aAliasIt[nX],4,0)
			lProcess := .F.
			DisarmTransaction()
			EXIT
		ENDIF				
		
	NEXT nX

	//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
	//≥ FIM DA TRANSACAO                                                  ≥
	//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
	END TRANSACTION

ENDIF

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥Restaura as variaveis de ambiente                                          ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
RestInter()
RestArea(aArea)
Return(.T.)
/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ CSE010PBI∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Parambox da rotina de importacao do entidades              ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/

STATIC FUNCTION CSE010PBI()

Local aParamBox 	:= {}										// Array de parametros de acordo com a regra da ParamBox
Local cTitulo		:= "Importacao do cadastro de plano de entidades contabeis"	// Titulo da janela de parametros
Local aRet			:= {}										// Array que ser· passado por referencia e retornado com o conteudo de cada parametro
Local bOk			:= {|| .T.}									// Bloco de codigo para validacao do OK da tela de parametros
Local aButtons		:= {}										// Array contendo a regra para adicao de novos botoes (alÈm do OK e Cancelar) // AADD(aButtons,{nType,bAction,cTexto})
Local lCentered		:= .T.										// Se a tela ser· exibida centralizada, quando a mesma n„o estiver vinculada a outra janela
Local nPosx		    										// Posicao inicial -> linha (Linha final: nPosX+274)
Local nPosy													// Posicao inicial -> coluna (Coluna final: nPosY+445)
//Local oMainDlg											// Caso o ParamBox deva ser vinculado a uma outra tela
Local cLoad			:= ""										// Nome do arquivo aonde as respostas do usu·rio ser„o salvas / lidas
Local lCanSave		:= .F.										// Se as respostas para as perguntas podem ser salvas
Local lUserSave 	:= .F.										// Se o usu·rio pode salvar sua propria configuracao
Local nX			:= 0
Local lRet			:= .F.

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥ Perguntas para parametrizacao da rotina (PARAMBOX)          			≥
//≥ MV_PAR01   - Arquivo a importar:           						     	≥
//≥ MV_PAR02   - Entidade:                         					     	≥
//≥ MV_PAR03   - Plano contabil:                   					     	≥
//≥ MV_PAR04   - Modo de importacao: (Novo cadastro / Atualizar cadastro)   ≥
//≥ MV_PAR05   - Exibe cadastro para edicao: (Sim / Nao)   					≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ

AADD(aParamBox,{6,"Arquivo a importar         " ,SPACE(150)					,"",,"",90 ,.T.,"Arquivo .CSV |*.CSV","",GETF_LOCALHARD+GETF_LOCALFLOPPY+GETF_NETWORKDRIVE})
AADD(aParamBox,{1,"Entidade                   " ,CT0->CT0_ID    				,"@!","AllwaysTrue()",,".F.",TamSx3("CT0_ID")[1],.T.})
AADD(aParamBox,{1,"Plano contabil             " ,CT0->CT0_ENTIDA				,"@!","AllwaysTrue()",,".F.",TamSx3("CT0_ENTIDA")[1],.T.})
AADD(aParamBox,{2,"Modo de importacao         " ,2,{"Novo cadastro","Atualizar cadastro"}	,100,"AllwaysTrue()",.T.,.T.})
AADD(aParamBox,{2,"Exibe cadastro para edicao " ,2,{"Sim","Nao"}										,100,"AllwaysTrue()",.T.,.T.})

lRet := ParamBox(aParamBox, cTitulo, aRet, bOk, aButtons, lCentered, nPosx, nPosy, /*oMainDlg*/ , cLoad, lCanSave, lUserSave)

IF ValType(aRet) == "A" .AND. Len(aRet) == Len(aParamBox)
	For nX := 1 to Len(aParamBox)
		If aParamBox[nX][1] == 1
			&("MV_PAR"+StrZero(nX,2)) := aRet[nX]
		ElseIf aParamBox[nX][1] == 2 .AND. ValType(aRet[nX]) == "C"
			&("MV_PAR"+StrZero(nX,2)) := aScan(aParamBox[nX][4],{|x| Alltrim(x) == aRet[nX]})
		ElseIf aParamBox[nX][1] == 2 .AND. ValType(aRet[nX]) == "N"
			&("MV_PAR"+StrZero(nX,2)) := aRet[nX]
		Endif	
	Next nX
ENDIF

Return lRet

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ CSE010PBE∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥  ---------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Parambox da rotina de exportacao de entidades              ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/

STATIC FUNCTION CSE010PBE()

Local aParamBox := {}										// Array de parametros de acordo com a regra da ParamBox
Local cTitulo	:= "Exportacao do cadastro de plano de entidades contabeis"	// Titulo da janela de parametros
Local aRet		:= {}										// Array que ser· passado por referencia e retornado com o conteudo de cada parametro
Local bOk		:= {|| .T.}									// Bloco de codigo para validacao do OK da tela de parametros
Local aButtons	:= {}										// Array contendo a regra para adicao de novos botoes (alÈm do OK e Cancelar) // AADD(aButtons,{nType,bAction,cTexto})
Local lCentered	:= .T.										// Se a tela ser· exibida centralizada, quando a mesma n„o estiver vinculada a outra janela
Local nPosx		    										// Posicao inicial -> linha (Linha final: nPosX+274)
Local nPosy													// Posicao inicial -> coluna (Coluna final: nPosY+445)
//Local oMainDlg											// Caso o ParamBox deva ser vinculado a uma outra tela
Local cLoad		:= ""										// Nome do arquivo aonde as respostas do usu·rio ser„o salvas / lidas
Local lCanSave	:= .F.										// Se as respostas para as perguntas podem ser salvas
Local lUserSave := .F.										// Se o usu·rio pode salvar sua propria configuracao
Local nX		:= 0
Local lRet		:= .F.

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥ Perguntas para parametrizacao da rotina (PARAMBOX)          			    ≥
//≥ MV_PAR01   - Entidade:                         					     	    ≥
//≥ MV_PAR02   - Plano contabil:                   					     	    ≥
//≥ MV_PAR03   - Arquivo destino:              						     	       ≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ

AADD(aParamBox,{1,"Entidade         " ,CT0->CT0_ID    			,"@!","AllwaysTrue()",,".F.",TamSx3("CT0_ID")[1],.T.})
AADD(aParamBox,{1,"Plano contabil   " ,CT0->CT0_ENTIDA			,"@!","AllwaysTrue()",,".F.",TamSx3("CT0_ENTIDA")[1],.T.})
AADD(aParamBox,{6,"Arquivo de saida " ,SPACE(150)					,"",,"",90 ,.T.,"Arquivo .CSV |*.CSV","",GETF_LOCALHARD+GETF_LOCALFLOPPY+GETF_NETWORKDRIVE})

lRet := ParamBox(aParamBox, cTitulo, aRet, bOk, aButtons, lCentered, nPosx, nPosy, /*oMainDlg*/ , cLoad, lCanSave, lUserSave)

IF ValType(aRet) == "A" .AND. Len(aRet) == Len(aParamBox)
	For nX := 1 to Len(aParamBox)
		If aParamBox[nX][1] == 1
			&("MV_PAR"+StrZero(nX,2)) := aRet[nX]
		ElseIf aParamBox[nX][1] == 2 .AND. ValType(aRet[nX]) == "C"
			&("MV_PAR"+StrZero(nX,2)) := aScan(aParamBox[nX][4],{|x| Alltrim(x) == aRet[nX]})
		ElseIf aParamBox[nX][1] == 2 .AND. ValType(aRet[nX]) == "N"
			&("MV_PAR"+StrZero(nX,2)) := aRet[nX]
		Endif	
	Next nX
ENDIF

Return lRet

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ CSE010PVI∫Autor  ≥ TOTVS PROTHEUS     ∫ Data ≥ ----------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Parambox da rotina de vincular ent.contabil x ent.orcamto. ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ SIGACTB                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
STATIC FUNCTION CSE010PVI(nSelPergs)

Local aParamBox 	:= {}									// Array de parametros de acordo com a regra da ParamBox
Local cTitulo		:= ""									// Titulo da janela de parametros
Local aRet			:= {}									// Array que ser· passado por referencia e retornado com o conteudo de cada parametro
Local bOk			:= {|| .T.}								// Bloco de codigo para validacao do OK da tela de parametros
Local aButtons		:= {}									// Array contendo a regra para adicao de novos botoes (alÈm do OK e Cancelar) // AADD(aButtons,{nType,bAction,cTexto})
Local lCentered		:= .T.									// Se a tela ser· exibida centralizada, quando a mesma n„o estiver vinculada a outra janela
Local nPosx		    										// Posicao inicial -> linha (Linha final: nPosX+274)
Local nPosy													// Posicao inicial -> coluna (Coluna final: nPosY+445)
//Local oMainDlg											// Caso o ParamBox deva ser vinculado a uma outra tela
Local cLoad			:= ""									// Nome do arquivo aonde as respostas do usu·rio ser„o salvas / lidas
Local lCanSave		:= .F.									// Se as respostas para as perguntas podem ser salvas
Local lUserSave 	:= .F.									// Se o usu·rio pode salvar sua propria configuracao
Local nX			:= 0
Local lRet			:= .F.

Default nSelPergs 	:= 1

//⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
//≥ Perguntas para parametrizacao da rotina (PARAMBOX)          			≥
//≥ MV_PAR01   - Arquivo a importar:           						     	≥
//≥ MV_PAR02   - Entidade contabil:                					     	≥
//≥ MV_PAR03   - Entidade orcamentaria:            					     	≥
//¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ

AADD(aParamBox,{6,"Arquivo a importar         " ,SPACE(150)						,"",,"",90 ,.T.,"Arquivo .CSV |*.CSV","",GETF_LOCALHARD+GETF_LOCALFLOPPY+GETF_NETWORKDRIVE})

DO CASE

	CASE nSelPergs == 1 
		cTitulo := "Vincular plano de contas aos tipos de atividades"
		AADD(aParamBox,{2,"Entidade Contabil          " ,2,{"Plano de contas"}				,100,"AllwaysTrue()",.T.,.T.})
		AADD(aParamBox,{2,"Entidade Orcamentaria      " ,2,{"Tipo de Atividade"}			,100,"AllwaysTrue()",.T.,.T.})

	CASE nSelPergs == 2
		cTitulo := "Vincular produtos aos produtos comercializados"
		AADD(aParamBox,{2,"Entidade Sistemica         " ,2,{"Produtos"}					,100,"AllwaysTrue()",.T.,.T.})
		AADD(aParamBox,{2,"Entidade Orcamentaria      " ,2,{"Produtos Comercializados"}	,100,"AllwaysTrue()",.T.,.T.})

	CASE nSelPergs == 3
		cTitulo := "Vincular canais de vendas a entidade canais de vendas"
		AADD(aParamBox,{2,"Entidade Sistemica         " ,2,{"Canais de Vendas"}				,100,"AllwaysTrue()",.T.,.T.})
		AADD(aParamBox,{2,"Entidade Orcamentaria      " ,2,{"Entidade Canais de Vendas"}	,100,"AllwaysTrue()",.T.,.T.})

ENDCASE

lRet := ParamBox(aParamBox, cTitulo, aRet, bOk, aButtons, lCentered, nPosx, nPosy, /*oMainDlg*/ , cLoad, lCanSave, lUserSave)

IF ValType(aRet) == "A" .AND. Len(aRet) == Len(aParamBox)
	For nX := 1 to Len(aParamBox)
		If aParamBox[nX][1] == 1
			&("MV_PAR"+StrZero(nX,2)) := aRet[nX]
		ElseIf aParamBox[nX][1] == 2 .AND. ValType(aRet[nX]) == "C"
			&("MV_PAR"+StrZero(nX,2)) := aScan(aParamBox[nX][4],{|x| Alltrim(x) == aRet[nX]})
		ElseIf aParamBox[nX][1] == 2 .AND. ValType(aRet[nX]) == "N"
			&("MV_PAR"+StrZero(nX,2)) := aRet[nX]
		Endif	
	Next nX
ENDIF

Return lRet

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±⁄ƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø±±
±±≥FunáÑo    ≥ CSEValDel  ≥ Autor ≥ TOTVS PROTHEUS       ≥ Data ≥ ----------------  ≥±±
±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥±±
±±≥DescriáÑo ≥ Verificar se pode excluir a entidade do plano de cadastro contabil   ≥±±
±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥±±
±±≥ Uso      ≥ CSEA010                                                   		    ≥±±
±±¿ƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
/*/
Static Function CSEValDel(cArqDel, cEntidade, cCodEnt, cMoeda, cTpSaldo)

Local aSaveArea	:= GetArea()
Local lRet		:= .T.
Local cFilBack	:= cFilAnt
Local cModo		:= ""
Local nArqs		:= 0
Local aSM0		:= Iif( FindFunction( "AdmAbreSM0" ) , AdmAbreSM0() , {} )
Local nContFil	:= 0
Local __cFilAnt:= cFilAnt

IF Len( aSM0 ) <= 0
	Help(" ",1,"NOFILIAL")
	Return .F.
Endif

dbSelectarea("SX2")
dbSetOrder(1)

If MsSeek(cArqDel)
	cModo	:= SX2->X2_MODO
EndIf

If cModo == "C"	//Se a tabela do registro a ser excluido for compartilhado, devera ser verificado em todas as filiais
	For nContFil := 1 to Len(aSM0)
		If aSM0[nContFil][SM0_GRPEMP] != cEmpAnt
			Loop
		EndIf
		dbSelectArea("CVX")
		dbSetOrder(2) //CVX_FILIAL+CVX_CONFIG+CVX_MOEDA+CVX_TPSALD+DTOS(CVX_DATA)
		cFilAnt	:= aSM0[nContFil][SM0_CODFIL]
		If MsSeek(xFilial()+cEntidade+cMoeda+cTpSaldo)

			While CVX->(!EOF()) .AND.;
					CVX->(CVX_CONFIG+CVX_MOEDA+CVX_TPSALD) == cEntidade+cMoeda+cTpSaldo
					
					If ALLTRIM(CVX->&("CVX_NIV"+cEntidade)) == ALLTRIM(cCodEnt)
						lRet	:= .F.
						cFilAnt	:= cFilBack
						RestArea(aSaveArea)
						Return(lRet)
 					Endif

					CVX->(dbSkip())					
			End

		EndIf
	Next nContFil
	cFilAnt := __cFilAnt
Else
	dbSelectArea("CVX")
	dbSetOrder(2) //CVX_FILIAL+CVX_CONFIG+CVX_MOEDA+CVX_TPSALD+DTOS(CVX_DATA)
	cFilAnt	:= aSM0[nContFil][SM0_CODFIL]
	If MsSeek(xFilial()+cEntidade+cMoeda+cTpSaldo)

		While CVX->(!EOF()) .AND.;
				CVX->(CVX_CONFIG+CVX_MOEDA+CVX_TPSALD) == cEntidade+cMoeda+cTpSaldo
				
				If ALLTRIM(CVX->&("CVX_NIV"+cEntidade)) == ALLTRIM(cCodEnt)
					lRet	:= .F.
					Exit
				Endif

				CVX->(dbSkip())					
		End

	EndIf

EndIf

RestArea(aSaveArea)
Return(lRet)

/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ X3TIPO   ∫Autor  ≥ TOTVS Protheus     ∫ Data ≥  ---------- ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ RETORNA O TIPO DO CAMPO CONFORME DICIONARIO DE DADOS       ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ CTBA390                                                    ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/
STATIC FUNCTION X3TIPO(cCampo)

LOCAL aArea 	:= GetArea() 
LOCAL aAreaSX3 := SX3->(GetArea())
LOCAL cTipo		:= "C"  // RETORNO PADRAO PARA PERMITIR O TRATAMENTO DA INFORMACAO NA ROTINA CHAMADORA

DEFAULT cCampo := ""

IF !Empty(cCampo)

	DbSelectArea("SX3")
	DbSetOrder(2) // X3_CAMPO
	IF DbSeek(ALLTRIM(cCampo))
		cTipo := X3_TIPO
	ENDIF

ENDIF

RestArea(aAreaSX3)
RestArea(aArea)

RETURN cTipo

/*/
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±⁄ƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒø±±
±±≥Funcao    ≥ NoAcento ≥ Autor ≥ TOTVS PROTHEUS        ≥ Data ≥ -------- ≥±±
±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒ¥±±
±±≥DescriáÖo ≥ Retira acento dos caracteres                               ≥±±
±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥±±      
±±≥Retorno   ≥ ExpC1: Retorna String sem Acento                           ≥±±
±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥±±
±±≥Parametros≥ ExpC1: Recebe String com Acento                            ≥±±
±±¿ƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
/*/
STATIC FUNCTION NoAcento(cString)

Local nConta := 0           
Local cLetra := ""        
Local cRet   := ""
cString := Upper(cString)
For nConta:= 1 To Len(cString)	
	cLetra := SubStr(cString, nConta, 1)
	Do Case
		Case (Asc(cLetra) >= 191 .and. Asc(cLetra) <= 198) .or. (Asc(cLetra) >= 223 .and. Asc(cLetra) <= 230)
			cLetra := "A"
		Case (Asc(cLetra) >= 199 .and. Asc(cLetra) <= 204) .or. (Asc(cLetra) >= 231 .and. Asc(cLetra) <= 236)
			cLetra := "E"
		Case (Asc(cLetra) >= 204 .and. Asc(cLetra) <= 207) .or. (Asc(cLetra) >= 235 .and. Asc(cLetra) <= 240)
			cLetra := "I"
		Case (Asc(cLetra) >= 209 .and. Asc(cLetra) <= 215) .or. (Asc(cLetra) == 240) .or. (Asc(cLetra) >= 241 .and. Asc(cLetra) <= 247)
			cLetra := "O"
		Case (Asc(cLetra) >= 216 .and. Asc(cLetra) <= 221) .or. (Asc(cLetra) >= 248 .and. Asc(cLetra) <= 253)
			cLetra := "U"
		Case Asc(cLetra) == 128 .or. Asc(cLetra) == 135 .or. Asc(cLetra) == 199 .or. Asc(cLetra) == 231
			cLetra := "C"
		Case Asc(cLetra) == 35 // "#"
			cLetra := "?"
		Case Asc(cLetra) == 63 // "?"
			cLetra := "?" 
		Case cLetra == '"'
			cLetra := ' '
	EndCase   
	cRet := cRet+cLetra
Next

Return UPPER(cRet)

/*/
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±⁄ƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒø±±
±±≥Programa  ≥MenuDef   ≥ Autor ≥-----------------------| Data ≥----------≥±±
±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒ¥±±
±±≥DescriáÖo ≥ Utilizacao de menu Funcional                               ≥±±
±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥±±
±±≥Retorno   ≥Array com opcoes da rotina.                                 ≥±±
±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥±±
±±≥Parametros≥Parametros do array a Rotina:                               ≥±±
±±≥          ≥1. Nome a aparecer no cabecalho                             ≥±±
±±≥          ≥2. Nome da Rotina associada                                 ≥±±
±±≥          ≥3. Reservado                                                ≥±±
±±≥          ≥4. Tipo de TransaáÑo a ser efetuada:                        ≥±±
±±≥          ≥	 1 - Pesquisa e Posiciona em um Banco de Dados             ≥±±
±±≥          ≥   2 - Simplesmente Mostra os Campos                        ≥±±
±±≥          ≥   3 - Inclui registros no Bancos de Dados                  ≥±±
±±≥          ≥   4 - Altera o registro corrente                           ≥±±
±±≥          ≥   5 - Remove o registro corrente do Banco de Dados         ≥±±
±±≥          ≥5. Nivel de acesso                                          ≥±±
±±≥          ≥6. Habilita Menu Funcional                                  ≥±±
±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥±±
±±≥   DATA   ≥ Programador   ≥Manutencao efetuada                         ≥±±
±±√ƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥±±
±±≥          ≥               ≥                                            ≥±±
±±¿ƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ*/

Static Function MenuDef()

Local aRotina 		:= {}
Local aSubRot01 	:= {}
Local aSubRot02 	:= {}
Local aSubRot03 	:= {}

aAdd( aSubRot01 	, { OEMTOANSI("Clientes")			, "U_CSE010SN(1)"		, 0 , 0				, 0,.F. })
aAdd( aSubRot01 	, { OEMTOANSI("Fornecedores")		, "U_CSE010SN(2)"		, 0 , 0				, 0,.F. })
aAdd( aSubRot01 	, { OEMTOANSI("Produtos")			, "U_CSE010SN(3)"		, 0 , 0				, 0,.F. })

//aAdd( aSubRot02 	, { OEMTOANSI("Conta   x TPA")		, "U_CSE010VN(1)"		, 0 , 0				, 0,.F. })
//aAdd( aSubRot02 	, { OEMTOANSI("Produto x PRD")		, "U_CSE010VN(2)"		, 0 , 0				, 0,.F. })
//aAdd( aSubRot02 	, { OEMTOANSI("Canal   x CNV")		, "U_CSE010VN(3)"		, 0 , 0				, 0,.F. })

//aAdd( aSubRot03 	, { OEMTOANSI("Importar")			, "U_CSE010IP"			, 0 , 0				, 0,.F. })
//aAdd( aSubRot03 	, { OEMTOANSI("Exportar")			, "U_CSE010EP"			, 0 , 0				, 0,.F. })

aAdd( aRotina		, { OEMTOANSI("Pesquisar")			, "AxPesqui"			, 0 , 1				, 0,.F. })
aAdd( aRotina		, { OEMTOANSI("Visualizar")			, "U_CSE010DLG"			, 0 , 2				, 0,.F. })
aAdd( aRotina		, { OEMTOANSI("Incluir")			, "U_CSE010DLG"			, 0 , nCSEINCLUI	, 0,.F. })
aAdd( aRotina		, { OEMTOANSI("Alterar")			, "U_CSE010DLG"			, 0 , 4				, 0,.F. })
aAdd( aRotina 		, { OEMTOANSI("Sincronizar")		, aClone(aSubRot01)		, 0 , 3				, 0,.F. })
//aAdd( aRotina 		, { OEMTOANSI("Vincular")			, aClone(aSubRot02)		, 0 , 3				, 0,.F. })
//aAdd( aRotina 		, { OEMTOANSI("Ferramentas")		, aClone(aSubRot03)		, 0 , 3				, 0,.F. })

Return(aRotina)


/*
‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±…ÕÕÕÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÀÕÕÕÕÕÕ—ÕÕÕÕÕÕÕÕÕÕÕÕÕª±±
±±∫Programa  ≥ CSEA10A  ∫Autor  ≥Guilherme C. Leal   ∫ Data ≥  01/28/03   ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕ ÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Desc.     ≥ Funcao que retorna o aHeader de um arquivo especificado    ∫±±
±±ÃÕÕÕÕÕÕÕÕÕÕÿÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕπ±±
±±∫Uso       ≥ AP8                                                        ∫±±
±±»ÕÕÕÕÕÕÕÕÕÕœÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
*/

Static Function CSEA10A(cAlias,aCpos,aCposNo,aEnchAuto,aCposVisual,lWalk_Thru)

Local aCampo	 := {}
Local aHeader	 := {}
Local aAreaSX3 := SX3->(GetArea())
Local cPode
Local cObgt
Local lObrigat

Default aCpos     := {}
Default aCposVisual:= {}
Default aCposNo   := {}
Default aEnchAuto := {}
Default lWalk_Thru := .F.

SX3->(DbSetOrder(1))
SX3->(DbSeek(cAlias))

Do While !SX3->(Eof()) .And. SX3->X3_ARQUIVO == cAlias
	If !x3uso(SX3->X3_USADO) 
		SX3->(DbSkip())
		Loop
	EndIf

	cPode := X3Reserv(SX3->x3_reserv)
	cObgt := Bin2Str(SX3->x3_Obrigat)
	lObrigat := Iif(Substr(cPode,7,1)=="x" .or. Substr(cObgt,1,1)== "x",.T.,.F.)
	lVisual := If(aScan(aCposVisual,Alltrim(SX3->X3_CAMPO))>0,.T.,.F.) 
	
		
	
	aCampo := {Trim(X3Titulo()),SX3->X3_CAMPO,SX3->X3_PICTURE,			;
		SX3->X3_TAMANHO,SX3->X3_DECIMAL,".T.",SX3->X3_USADO,SX3->X3_TIPO,	;
		SX3->X3_F3,SX3->X3_CONTEXT,If(__LANGUAGE=="SPANISH",SX3->X3_CBOXSPA, ;
		If(__LANGUAGE== "ENGLISH",SX3->X3_CBOXENG, SX3->X3_CBOX)),SX3->X3_RELACAO,".T.",		;
		If(lVisual,"V",SX3->X3_VISUAL),	SX3->X3_VLDUSER, SX3->X3_PICTVAR,lObrigat}
		
	If Len(aCposNo) > 0 .And. ( AScan(aCposNo,{|x| Upper(AllTrim(SX3->X3_CAMPO)) == Upper(AllTrim(x)) }) > 0	)
		Aadd(aEnchAuto,aClone(aCampo))
		SX3->(DbSkip())
		Loop
	EndIf
	
	If Len(aCpos) = 0 .Or. ( Len(aCpos) > 0 .And. AScan(aCpos,{|x| Upper(AllTrim(SX3->X3_CAMPO)) == Upper(AllTrim(x)) }) > 0 )
		Aadd(aHeader,aClone(aCampo))
	EndIf

	SX3->(DbSkip())
	
EndDo

If lWalk_Thru
	PcoHeaderWT(cAlias, aHeader)
EndIf

SX3->(RestArea(aAreaSX3))
Return aHeader
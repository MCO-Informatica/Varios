#Include "Protheus.ch"

/*/{Protheus.doc} User Function xVTotOrc
    (long_description)
    @type  Function
    @author Lucas Baia - UPDUO
    @since 26/05/2021
    @version 
    @param  
    @return  
    @example
    (examples)
    @see (links_or_references)
    /*/
User Function xVTotOrc()

MaFisIni(SCJ->CJ_CLIENTE,; // 1-Codigo Cliente/Fornecedor
SCJ->CJ_LOJA,; // 2-Loja do Cliente/Fornecedor
"C",; // 3-C:Cliente , F:Fornecedor
SCJ->CJ_TIPO,; // 4-Tipo da NF
SCJ->CJ_TIPOCLI,; // 5-Tipo do Cliente/Fornecedor
MaFisRelImp("MTR700",{"SCJ","SCK"}),; // 6-Relacao de Impostos que suportados no arquivo
,; // 7-Tipo de complemento
,; // 8-Permite Incluir Impostos no Rodape .T./.F.
"SB1",; // 9-Alias do Cadastro de Produtos - ("SBI" P/ Front Loja)
"MTR700") // 10-Nome da rotina que esta utilizando a funcao

nItem := 0
nValIcmSt := 0
nDesconto := 0
nVlrTotal := 0.00
nTotDesc := 0.00
nTotalNF := 0.00

If SCK->(dbSetOrder(1), dbSeek(xFilial("SCK")+SCJ->CJ_NUM))
    While SCK->(!Eof()) .And. xFilial("SCK")==SCK->CK_FILIAL .And. SCK->CK_NUM == SCJ->CJ_NUM
        nItem ++
        MaFisAdd(SCK->CK_PRODUTO,; // 1-Codigo do Produto ( Obrigatorio )
        SCK->CK_TES,; // 2-Codigo do TES ( Opcional )
        SCK->CK_QTDVEN,; // 3-Quantidade ( Obrigatorio )
        SCK->CK_PRCVEN,; // 4-Preco Unitario ( Obrigatorio )
        nDesconto,; // 5-Valor do Desconto ( Opcional )
        nil,; // 6-Numero da NF Original ( Devolucao/Benef )
        nil,; // 7-Serie da NF Original ( Devolucao/Benef )
        nil,; // 8-RecNo da NF Original no arq SD1/SD2
        0,;//SCJ->CJ_FRETE/nNritem,; // 9-Valor do Frete do Item ( Opcional )
        0,;//SCJ->CJ_DESPESA/nNritem,; // 10-Valor da Despesa do item ( Opcional )
        0,;//SCJ->CJ_SEGURO/nNritem,; // 11-Valor do Seguro do item ( Opcional )
        0,; // 12-Valor do Frete Autonomo ( Opcional )
        SCK->CK_Valor+nDesconto,; // 13-Valor da Mercadoria ( Obrigatorio )
        0,; // 14-Valor da Embalagem ( Opcional )
        0,; // 15-RecNo do SB1
        0) // 16-RecNo do SF4
        nTotalNF := MaFisRet(,'NF_TOTAL')
        SCK->(DbSkip())
    EndDo
        nVlrTotal := Round(nTotalNF - nTotDesc,2)
Endif
    MaFisEnd()//Termino

If RecLock("SCJ",.F.)
    SCJ->CJ_TOTPED := nVlrTotal
    SCJ->(MsUnlock())
Endif

Return nVlrTotal

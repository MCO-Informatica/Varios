#include 'TBICONN.CH'
#include 'protheus.ch'
#include 'totvs.ch'
#include 'fileio.ch'
#include "directry.ch"

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³EDICHAPECO ºAutor  ³Denis Varella º Data ³  28/02/2022 	  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³INTEGRACAO DO EDI DISPONIBILIZADO PELA TRANSP. CHAPECO      º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
User Function EDIChapeco()
Local cBuffer   := ""
Local cArqImpor := '\CHAPECO\EDI\'
Local nX := nA := 0
Local aFiles 	:= {} // O array receberá os nomes dos arquivos e do diretório
Local aSizes 	:= {} // O array receberá os tamanhos dos arquivos e do diretorio
Local nNum 		:= 0
PREPARE ENVIRONMENT EMPRESA '01' FILIAL '01'

GetFTP()

ADir(cArqImpor+"*.TXT", aFiles, aSizes)
// Exibe dados dos arquivos
nCount := Len( aFiles )
For nX := 1 to nCount
	
	If !file(cArqImpor+aFiles[nX])
		Return
	Else
		//+---------------------------------------------------------------------+
		//| Abertura do arquivo texto                                           |
		//+---------------------------------------------------------------------+
		nHdl := fOpen(cArqImpor+aFiles[nX])
		
		//+---------------------------------------------------------------------+
		//| Posiciona no Inicio do Arquivo                                      |
		//+---------------------------------------------------------------------+
		FSEEK(nHdl,0,0)
		
		//+---------------------------------------------------------------------+
		//| Traz o Tamanho do Arquivo TXT                                       |
		//+---------------------------------------------------------------------+
		nTamArq:=FSEEK(nHdl,0,2)
		
		//+---------------------------------------------------------------------+
		//| Posicona novamemte no Inicio                                        |
		//+---------------------------------------------------------------------+
		FSEEK(nHdl,0,0)
		
		//+---------------------------------------------------------------------+
		//| Fecha o Arquivo                                                     |
		//+---------------------------------------------------------------------+
		fClose(nHdl)
		FT_FUse(cArqImpor+aFiles[nX])  //abre o arquivo
		FT_FGOTOP()         //posiciona na primeira linha do arquivo
		
		aDocs := {}
		nNum := 0
		While !FT_FEOF() //Ler todo o arquivo enquanto não for o final dele
			IncProc()
			cBuffer := FT_FREADLN()
			
			//header
			If SubStr(cBuffer,1,3) == "000"
				
			ElseIf SubStr(cBuffer,1,3) == "342"
                cDia := SubStr(cBuffer,31,2)
                cMes := SubStr(cBuffer,33,2)
                cAno := SubStr(cBuffer,35,4)
                cHora := SubStr(cBuffer,39,2)+":"+SubStr(cBuffer,41,2)
                dData := StoD(cAno+cMes+cDia)
				cSerie := SubStr(cBuffer,18,3)
				cDoc := PadL(SubStr(cBuffer,21,8),9,"0")
                cNome := SubStr(cBuffer,45,76)

				aAdd(aDocs,{dData,cHora,cSerie,cDoc,cNome}) 
			EndIf
			
			FT_FSKIP()
		endDo
		FT_FUSE()

		DbSelectArea("SC5")
		SC5->(DbSetOrder(11))

        For nA := 1 to len(aDocs)
            If SC5->(DbSeek(xFilial("SC5")+aDocs[nA][4]))
                SC5->(RecLock("SC5",.F.))
                SC5->C5_XTRANDT := aDocs[nA][1]
                SC5->C5_XTRANHR := aDocs[nA][2]
                SC5->C5_XTRANNM := Trim(aDocs[nA][5])
                SC5->(MsUnlock())
            EndIf
        Next nA

        __CopyFile(cArqImpor+aFiles[nX], cArqImpor+"HISTORICO\"+aFiles[nX])
		
		FERASE(cArqImpor+aFiles[nX])
	EndIf
	
Next
RESET ENVIRONMENT

Return


Static Function GetFTP()
	Local cFTPHost 	:= "192.168.0.1"
	Local nFTPPort 	:= 7890
	Local cFTPUser 	:= "FTP_CHAPECO"
	Local cFTPPwd 	:= "&Ns$-0.D<-}n28-)z}."
	Local cFTPDIR 	:= "/Chapeco/"
	Local cDirTXT 	:= "\CHAPECO\EDI\"
	Local nRet
	Local nI
	Local sRet
	Local lFTPFireWallMode := .T.
	Private oFTPHandle
	DEFAULT lCaseSensitive     := .F.
   
  oFTPHandle := tFtpClient():New()

  oFTPHandle:BFIREWALLMODE := lFTPFireWallMode
  oFTPHandle:NCONNECTTIMEOUT := 10
  oFTPHandle:BUSESIPCONNECTION := .T.

  nRet := oFTPHandle:FTPConnect(cFTPHost,nFTPPort,cFTPUser,cFTPPwd)
  sRet := oFTPHandle:GetLastResponse()
  Conout( sRet )
   
  If (nRet != 0)
    Conout( "Falha ao conectar" )
    Return .F.
  EndIf
   
  oFTPHandle:ChDir(cFTPDIR)
  oFTPHandle:GetCurDir(sRet)
  cFtpLocal := sRet
  aFtpFile := oFTPHandle:Directory("*",.T.)
  For nI := 1 to len(aFtpFile)
	If aFtpFile[nI][5] != 'D'
		cSource := aFtpFile[nI][1]
		cTarget := cDirTXT+aFtpFile[nI][1]
		nFTPCommand := FTPReceiveFile(@oFTPHandle,@cSource,@cTarget,@lFTPFireWallMode)
		If File(cTarget)
			FTPfErase(@oFTPHandle,@cSource,@lCaseSensitive,@lFTPFireWallMode)
		EndIf
	EndIf
  Next nI
  Conout(sRet)
  sRet := oFTPHandle:GetLastResponse()
  Conout(sRet)
   
  oFTPHandle:GetHelp("")
  sRet := oFTPHandle:GetLastResponse()
  FTPDisconnect()
  Conout(sRet)
Return

Static Function FTPReceiveFile(oFTPClient,cFTPFile,cLocalFile,lFTPFireWallMode)
	Local cLastResponse
	Local lOk             := .F.
	Local nFTPCommand       := -1
	nFTPCommand   := oFTPClient:ReceiveFile(@cFTPFile,@cLocalFile)
	IF ( .NOT. ( nFTPCommand == 0 ) )
		cLastResponse := oFTPClient:GetLastResponse()
		IF ( "500" $ cLastResponse )
			oFTPClient:bFireWallMode := .T.
			nFTPCommand              := oFTPClient:ReceiveFile(@cFTPFile,@cLocalFile)
			oFTPClient:bFireWallMode := lFTPFireWallMode
		EndIF
	EndIF 

	FTPSleep(@oFTPClient,200)

	cLastResponse := oFTPClient:GetLastResponse()
	lOk := ( nFTPCommand == 0 )

Return lOk

Static Function FTPSleep(oFTPClient,nSleep)
	Local nFTPSleep
	DEFAULT nSleep                     := 0
	IF ( ValType(oFTPClient) == "O" )
		DEFAULT oFTPClient:nConnectTimeOut := 120
		nFTPSleep      := ( oFTPClient:nConnectTimeOut / 2 )
	Else
		nFTPSleep      := nSleep
	EndIF    
	nSleep             := Min( nSleep , nFTPSleep )
Return Sleep(nSleep)

Static Function FTPfErase(oFTPClient,cFile,lCaseSensitive,lFTPFireWallMode)
	Local cFTPCommand
	Local nFTPCommand
	Local lOK             := .F.
	Static __lFTPDelQuote := .F.
	IF __lFTPDelQuote
		__lFTPDelQuote   := .F.
		cFTPCommand      := ( "DELE " + cFile )
		nFTPCommand      := FTPQuote(@oFTPClient,@cFTPCommand)
	Else
		__lFTPDelQuote   := .T.
		nFTPCommand      := oFTPClient:DeleteFile( cFile )
	EndIF
	FTPSleep(@oFTPClient,200)
	cLastResponse := oFTPClient:GetLastResponse()
	lOK := ( Len( oFTPClient:Directory(cFile,.T.) ) == 0 )
Return lOK
